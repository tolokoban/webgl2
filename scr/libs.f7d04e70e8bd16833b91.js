/*! For license information please see libs.f7d04e70e8bd16833b91.js.LICENSE.txt */
(self.webpackChunkWebGL_2=self.webpackChunkWebGL_2||[]).push([[977],{6938:(e,t,n)=>{"use strict";n.d(t,{Z:()=>l});var r=n(7537),u=n.n(r),a=n(3645),o=n.n(a)()(u());o.push([e.id,"pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}/*!\n  Theme: GitHub\n  Description: Light theme as seen on github.com\n  Author: github.com\n  Maintainer: @Hirse\n  Updated: 2021-05-15\n\n  Outdated base version: https://github.com/primer/github-syntax-light\n  Current colors taken from GitHub's CSS\n*/.hljs{color:#24292e;background:#fff}.hljs-doctag,.hljs-keyword,.hljs-meta .hljs-keyword,.hljs-template-tag,.hljs-template-variable,.hljs-type,.hljs-variable.language_{color:#d73a49}.hljs-title,.hljs-title.class_,.hljs-title.class_.inherited__,.hljs-title.function_{color:#6f42c1}.hljs-attr,.hljs-attribute,.hljs-literal,.hljs-meta,.hljs-number,.hljs-operator,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-id,.hljs-variable{color:#005cc5}.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#032f62}.hljs-built_in,.hljs-symbol{color:#e36209}.hljs-code,.hljs-comment,.hljs-formula{color:#6a737d}.hljs-name,.hljs-quote,.hljs-selector-pseudo,.hljs-selector-tag{color:#22863a}.hljs-subst{color:#24292e}.hljs-section{color:#005cc5;font-weight:700}.hljs-bullet{color:#735c0f}.hljs-emphasis{color:#24292e;font-style:italic}.hljs-strong{color:#24292e;font-weight:700}.hljs-addition{color:#22863a;background-color:#f0fff4}.hljs-deletion{color:#b31d28;background-color:#ffeef0}","",{version:3,sources:["webpack://./node_modules/highlight.js/styles/github.css"],names:[],mappings:"AAAA,cAAc,aAAa,CAAC,eAAe,CAAC,WAAW,CAAC,UAAU,eAAe,CAAC;;;;;;;;;CASjF,CAAC,MAAM,aAAa,CAAC,eAAe,CAAC,mIAAmI,aAAa,CAAC,oFAAoF,aAAa,CAAC,0JAA0J,aAAa,CAAC,kDAAkD,aAAa,CAAC,4BAA4B,aAAa,CAAC,uCAAuC,aAAa,CAAC,gEAAgE,aAAa,CAAC,YAAY,aAAa,CAAC,cAAc,aAAa,CAAC,eAAe,CAAC,aAAa,aAAa,CAAC,eAAe,aAAa,CAAC,iBAAiB,CAAC,aAAa,aAAa,CAAC,eAAe,CAAC,eAAe,aAAa,CAAC,wBAAwB,CAAC,eAAe,aAAa,CAAC,wBAAwB",sourcesContent:["pre code.hljs{display:block;overflow-x:auto;padding:1em}code.hljs{padding:3px 5px}/*!\n  Theme: GitHub\n  Description: Light theme as seen on github.com\n  Author: github.com\n  Maintainer: @Hirse\n  Updated: 2021-05-15\n\n  Outdated base version: https://github.com/primer/github-syntax-light\n  Current colors taken from GitHub's CSS\n*/.hljs{color:#24292e;background:#fff}.hljs-doctag,.hljs-keyword,.hljs-meta .hljs-keyword,.hljs-template-tag,.hljs-template-variable,.hljs-type,.hljs-variable.language_{color:#d73a49}.hljs-title,.hljs-title.class_,.hljs-title.class_.inherited__,.hljs-title.function_{color:#6f42c1}.hljs-attr,.hljs-attribute,.hljs-literal,.hljs-meta,.hljs-number,.hljs-operator,.hljs-selector-attr,.hljs-selector-class,.hljs-selector-id,.hljs-variable{color:#005cc5}.hljs-meta .hljs-string,.hljs-regexp,.hljs-string{color:#032f62}.hljs-built_in,.hljs-symbol{color:#e36209}.hljs-code,.hljs-comment,.hljs-formula{color:#6a737d}.hljs-name,.hljs-quote,.hljs-selector-pseudo,.hljs-selector-tag{color:#22863a}.hljs-subst{color:#24292e}.hljs-section{color:#005cc5;font-weight:700}.hljs-bullet{color:#735c0f}.hljs-emphasis{color:#24292e;font-style:italic}.hljs-strong{color:#24292e;font-weight:700}.hljs-addition{color:#22863a;background-color:#f0fff4}.hljs-deletion{color:#b31d28;background-color:#ffeef0}"],sourceRoot:""}]);const l=o},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,u,a){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var l=0;l<this.length;l++){var i=this[l][0];null!=i&&(o[i]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&o[c[0]]||(void 0!==a&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=a),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),u&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=u):c[4]="".concat(u)),t.push(c))}},t}},7537:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(u," */"),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(o).concat([a]).join("\n")}return[t].join("\n")}},1142:function(e){e.exports=function(){"use strict";function e(e,t){return e(t={exports:{}},t.exports),t.exports}var t=e((function(e){var t=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=t)})),n=e((function(e){var t=e.exports={version:"2.6.5"};"number"==typeof __e&&(__e=t)})),r=(n.version,function(e){return"object"==typeof e?null!==e:"function"==typeof e}),u=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e},a=function(e){try{return!!e()}catch(e){return!0}},o=!a((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})),l=t.document,i=r(l)&&r(l.createElement),s=!o&&!a((function(){return 7!=Object.defineProperty((e="div",i?l.createElement(e):{}),"a",{get:function(){return 7}}).a;var e})),c=Object.defineProperty,f={f:o?Object.defineProperty:function(e,t,n){if(u(e),t=function(e,t){if(!r(e))return e;var n,u;if(t&&"function"==typeof(n=e.toString)&&!r(u=n.call(e)))return u;if("function"==typeof(n=e.valueOf)&&!r(u=n.call(e)))return u;if(!t&&"function"==typeof(n=e.toString)&&!r(u=n.call(e)))return u;throw TypeError("Can't convert object to primitive value")}(t,!0),u(n),s)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},d=o?function(e,t,n){return f.f(e,t,function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}(1,n))}:function(e,t,n){return e[t]=n,e},p={}.hasOwnProperty,g=function(e,t){return p.call(e,t)},h=0,m=Math.random(),D=e((function(e){var r="__core-js_shared__",u=t[r]||(t[r]={});(e.exports=function(e,t){return u[e]||(u[e]=void 0!==t?t:{})})("versions",[]).push({version:n.version,mode:"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})})),v=D("native-function-to-string",Function.toString),y=e((function(e){var r=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++h+m).toString(36))}("src"),u="toString",a=(""+v).split(u);n.inspectSource=function(e){return v.call(e)},(e.exports=function(e,n,u,o){var l="function"==typeof u;l&&(g(u,"name")||d(u,"name",n)),e[n]!==u&&(l&&(g(u,r)||d(u,r,e[n]?""+e[n]:a.join(String(n)))),e===t?e[n]=u:o?e[n]?e[n]=u:d(e,n,u):(delete e[n],d(e,n,u)))})(Function.prototype,u,(function(){return"function"==typeof this&&this[r]||v.call(this)}))})),b=function(e,t,n){if(function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!")}(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,u){return e.call(t,n,r,u)}}return function(){return e.apply(t,arguments)}},C=function(e,r,u){var a,o,l,i,s=e&C.F,c=e&C.G,f=e&C.S,p=e&C.P,g=e&C.B,h=c?t:f?t[r]||(t[r]={}):(t[r]||{}).prototype,m=c?n:n[r]||(n[r]={}),D=m.prototype||(m.prototype={});for(a in c&&(u=r),u)l=((o=!s&&h&&void 0!==h[a])?h:u)[a],i=g&&o?b(l,t):p&&"function"==typeof l?b(Function.call,l):l,h&&y(h,a,l,e&C.U),m[a]!=l&&d(m,a,i),p&&D[a]!=l&&(D[a]=l)};t.core=n,C.F=1,C.G=2,C.S=4,C.P=8,C.B=16,C.W=32,C.U=64,C.R=128;var E,A=C,F=Math.ceil,w=Math.floor,x=function(e){return isNaN(e=+e)?0:(e>0?w:F)(e)},k=(E=!1,function(e,t){var n,r,u=String(function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}(e)),a=x(t),o=u.length;return a<0||a>=o?E?"":void 0:(n=u.charCodeAt(a))<55296||n>56319||a+1===o||(r=u.charCodeAt(a+1))<56320||r>57343?E?u.charAt(a):n:E?u.slice(a,a+2):r-56320+(n-55296<<10)+65536});A(A.P,"String",{codePointAt:function(e){return k(this,e)}}),n.String.codePointAt;var _=Math.max,S=Math.min,B=function(e,t){return(e=x(e))<0?_(e+t,0):S(e,t)},M=String.fromCharCode,N=String.fromCodePoint;A(A.S+A.F*(!!N&&1!=N.length),"String",{fromCodePoint:function(e){for(var t,n=arguments,r=[],u=arguments.length,a=0;u>a;){if(t=+n[a++],B(t,1114111)!==t)throw RangeError(t+" is not a valid code point");r.push(t<65536?M(t):M(55296+((t-=65536)>>10),t%1024+56320))}return r.join("")}}),n.String.fromCodePoint;var P,T,O,L,I,j,z,R,U,$,H,V,W,G,K={Space_Separator:/[\u1680\u2000-\u200A\u202F\u205F\u3000]/,ID_Start:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/,ID_Continue:/[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/},Q=function(e){return"string"==typeof e&&K.Space_Separator.test(e)},q=function(e){return"string"==typeof e&&(e>="a"&&e<="z"||e>="A"&&e<="Z"||"$"===e||"_"===e||K.ID_Start.test(e))},Z=function(e){return"string"==typeof e&&(e>="a"&&e<="z"||e>="A"&&e<="Z"||e>="0"&&e<="9"||"$"===e||"_"===e||"â"===e||"â"===e||K.ID_Continue.test(e))},X=function(e){return"string"==typeof e&&/[0-9]/.test(e)},Y=function(e){return"string"==typeof e&&/[0-9A-Fa-f]/.test(e)};function J(e,t,n){var r=e[t];if(null!=r&&"object"==typeof r)for(var u in r){var a=J(r,u,n);void 0===a?delete r[u]:r[u]=a}return n.call(e,t,r)}function ee(){for($="default",H="",V=!1,W=1;;){G=te();var e=re[$]();if(e)return e}}function te(){if(P[L])return String.fromCodePoint(P.codePointAt(L))}function ne(){var e=te();return"\n"===e?(I++,j=0):e?j+=e.length:j++,e&&(L+=e.length),e}var re={default:function(){switch(G){case"\t":case"\v":case"\f":case" ":case"Â ":case"\ufeff":case"\n":case"\r":case"\u2028":case"\u2029":return void ne();case"/":return ne(),void($="comment");case void 0:return ne(),ue("eof")}if(!Q(G))return re[T]();ne()},comment:function(){switch(G){case"*":return ne(),void($="multiLineComment");case"/":return ne(),void($="singleLineComment")}throw ce(ne())},multiLineComment:function(){switch(G){case"*":return ne(),void($="multiLineCommentAsterisk");case void 0:throw ce(ne())}ne()},multiLineCommentAsterisk:function(){switch(G){case"*":return void ne();case"/":return ne(),void($="default");case void 0:throw ce(ne())}ne(),$="multiLineComment"},singleLineComment:function(){switch(G){case"\n":case"\r":case"\u2028":case"\u2029":return ne(),void($="default");case void 0:return ne(),ue("eof")}ne()},value:function(){switch(G){case"{":case"[":return ue("punctuator",ne());case"n":return ne(),ae("ull"),ue("null",null);case"t":return ne(),ae("rue"),ue("boolean",!0);case"f":return ne(),ae("alse"),ue("boolean",!1);case"-":case"+":return"-"===ne()&&(W=-1),void($="sign");case".":return H=ne(),void($="decimalPointLeading");case"0":return H=ne(),void($="zero");case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":return H=ne(),void($="decimalInteger");case"I":return ne(),ae("nfinity"),ue("numeric",1/0);case"N":return ne(),ae("aN"),ue("numeric",NaN);case'"':case"'":return V='"'===ne(),H="",void($="string")}throw ce(ne())},identifierNameStartEscape:function(){if("u"!==G)throw ce(ne());ne();var e=oe();switch(e){case"$":case"_":break;default:if(!q(e))throw de()}H+=e,$="identifierName"},identifierName:function(){switch(G){case"$":case"_":case"â":case"â":return void(H+=ne());case"\\":return ne(),void($="identifierNameEscape")}if(!Z(G))return ue("identifier",H);H+=ne()},identifierNameEscape:function(){if("u"!==G)throw ce(ne());ne();var e=oe();switch(e){case"$":case"_":case"â":case"â":break;default:if(!Z(e))throw de()}H+=e,$="identifierName"},sign:function(){switch(G){case".":return H=ne(),void($="decimalPointLeading");case"0":return H=ne(),void($="zero");case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":return H=ne(),void($="decimalInteger");case"I":return ne(),ae("nfinity"),ue("numeric",W*(1/0));case"N":return ne(),ae("aN"),ue("numeric",NaN)}throw ce(ne())},zero:function(){switch(G){case".":return H+=ne(),void($="decimalPoint");case"e":case"E":return H+=ne(),void($="decimalExponent");case"x":case"X":return H+=ne(),void($="hexadecimal")}return ue("numeric",0*W)},decimalInteger:function(){switch(G){case".":return H+=ne(),void($="decimalPoint");case"e":case"E":return H+=ne(),void($="decimalExponent")}if(!X(G))return ue("numeric",W*Number(H));H+=ne()},decimalPointLeading:function(){if(X(G))return H+=ne(),void($="decimalFraction");throw ce(ne())},decimalPoint:function(){switch(G){case"e":case"E":return H+=ne(),void($="decimalExponent")}return X(G)?(H+=ne(),void($="decimalFraction")):ue("numeric",W*Number(H))},decimalFraction:function(){switch(G){case"e":case"E":return H+=ne(),void($="decimalExponent")}if(!X(G))return ue("numeric",W*Number(H));H+=ne()},decimalExponent:function(){switch(G){case"+":case"-":return H+=ne(),void($="decimalExponentSign")}if(X(G))return H+=ne(),void($="decimalExponentInteger");throw ce(ne())},decimalExponentSign:function(){if(X(G))return H+=ne(),void($="decimalExponentInteger");throw ce(ne())},decimalExponentInteger:function(){if(!X(G))return ue("numeric",W*Number(H));H+=ne()},hexadecimal:function(){if(Y(G))return H+=ne(),void($="hexadecimalInteger");throw ce(ne())},hexadecimalInteger:function(){if(!Y(G))return ue("numeric",W*Number(H));H+=ne()},string:function(){switch(G){case"\\":return ne(),void(H+=function(){switch(te()){case"b":return ne(),"\b";case"f":return ne(),"\f";case"n":return ne(),"\n";case"r":return ne(),"\r";case"t":return ne(),"\t";case"v":return ne(),"\v";case"0":if(ne(),X(te()))throw ce(ne());return"\0";case"x":return ne(),function(){var e="",t=te();if(!Y(t))throw ce(ne());if(e+=ne(),t=te(),!Y(t))throw ce(ne());return e+=ne(),String.fromCodePoint(parseInt(e,16))}();case"u":return ne(),oe();case"\n":case"\u2028":case"\u2029":return ne(),"";case"\r":return ne(),"\n"===te()&&ne(),"";case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case void 0:throw ce(ne())}return ne()}());case'"':return V?(ne(),ue("string",H)):void(H+=ne());case"'":return V?void(H+=ne()):(ne(),ue("string",H));case"\n":case"\r":throw ce(ne());case"\u2028":case"\u2029":!function(e){console.warn("JSON5: '"+pe(e)+"' in strings is not valid ECMAScript; consider escaping")}(G);break;case void 0:throw ce(ne())}H+=ne()},start:function(){switch(G){case"{":case"[":return ue("punctuator",ne())}$="value"},beforePropertyName:function(){switch(G){case"$":case"_":return H=ne(),void($="identifierName");case"\\":return ne(),void($="identifierNameStartEscape");case"}":return ue("punctuator",ne());case'"':case"'":return V='"'===ne(),void($="string")}if(q(G))return H+=ne(),void($="identifierName");throw ce(ne())},afterPropertyName:function(){if(":"===G)return ue("punctuator",ne());throw ce(ne())},beforePropertyValue:function(){$="value"},afterPropertyValue:function(){switch(G){case",":case"}":return ue("punctuator",ne())}throw ce(ne())},beforeArrayValue:function(){if("]"===G)return ue("punctuator",ne());$="value"},afterArrayValue:function(){switch(G){case",":case"]":return ue("punctuator",ne())}throw ce(ne())},end:function(){throw ce(ne())}};function ue(e,t){return{type:e,value:t,line:I,column:j}}function ae(e){for(var t=0,n=e;t<n.length;t+=1){var r=n[t];if(te()!==r)throw ce(ne());ne()}}function oe(){for(var e="",t=4;t-- >0;){var n=te();if(!Y(n))throw ce(ne());e+=ne()}return String.fromCodePoint(parseInt(e,16))}var le={start:function(){if("eof"===z.type)throw fe();ie()},beforePropertyName:function(){switch(z.type){case"identifier":case"string":return R=z.value,void(T="afterPropertyName");case"punctuator":return void se();case"eof":throw fe()}},afterPropertyName:function(){if("eof"===z.type)throw fe();T="beforePropertyValue"},beforePropertyValue:function(){if("eof"===z.type)throw fe();ie()},beforeArrayValue:function(){if("eof"===z.type)throw fe();"punctuator"!==z.type||"]"!==z.value?ie():se()},afterPropertyValue:function(){if("eof"===z.type)throw fe();switch(z.value){case",":return void(T="beforePropertyName");case"}":se()}},afterArrayValue:function(){if("eof"===z.type)throw fe();switch(z.value){case",":return void(T="beforeArrayValue");case"]":se()}},end:function(){}};function ie(){var e;switch(z.type){case"punctuator":switch(z.value){case"{":e={};break;case"[":e=[]}break;case"null":case"boolean":case"numeric":case"string":e=z.value}if(void 0===U)U=e;else{var t=O[O.length-1];Array.isArray(t)?t.push(e):t[R]=e}if(null!==e&&"object"==typeof e)O.push(e),T=Array.isArray(e)?"beforeArrayValue":"beforePropertyName";else{var n=O[O.length-1];T=null==n?"end":Array.isArray(n)?"afterArrayValue":"afterPropertyValue"}}function se(){O.pop();var e=O[O.length-1];T=null==e?"end":Array.isArray(e)?"afterArrayValue":"afterPropertyValue"}function ce(e){return ge(void 0===e?"JSON5: invalid end of input at "+I+":"+j:"JSON5: invalid character '"+pe(e)+"' at "+I+":"+j)}function fe(){return ge("JSON5: invalid end of input at "+I+":"+j)}function de(){return ge("JSON5: invalid identifier character at "+I+":"+(j-=5))}function pe(e){var t={"'":"\\'",'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\v","\0":"\\0","\u2028":"\\u2028","\u2029":"\\u2029"};if(t[e])return t[e];if(e<" "){var n=e.charCodeAt(0).toString(16);return"\\x"+("00"+n).substring(n.length)}return e}function ge(e){var t=new SyntaxError(e);return t.lineNumber=I,t.columnNumber=j,t}return{parse:function(e,t){P=String(e),T="start",O=[],L=0,I=1,j=0,z=void 0,R=void 0,U=void 0;do{z=ee(),le[T]()}while("eof"!==z.type);return"function"==typeof t?J({"":U},"",t):U},stringify:function(e,t,n){var r,u,a,o=[],l="",i="";if(null==t||"object"!=typeof t||Array.isArray(t)||(n=t.space,a=t.quote,t=t.replacer),"function"==typeof t)u=t;else if(Array.isArray(t)){r=[];for(var s=0,c=t;s<c.length;s+=1){var f=c[s],d=void 0;"string"==typeof f?d=f:("number"==typeof f||f instanceof String||f instanceof Number)&&(d=String(f)),void 0!==d&&r.indexOf(d)<0&&r.push(d)}}return n instanceof Number?n=Number(n):n instanceof String&&(n=String(n)),"number"==typeof n?n>0&&(n=Math.min(10,Math.floor(n)),i="          ".substr(0,n)):"string"==typeof n&&(i=n.substr(0,10)),p("",{"":e});function p(e,t){var n=t[e];switch(null!=n&&("function"==typeof n.toJSON5?n=n.toJSON5(e):"function"==typeof n.toJSON&&(n=n.toJSON(e))),u&&(n=u.call(t,e,n)),n instanceof Number?n=Number(n):n instanceof String?n=String(n):n instanceof Boolean&&(n=n.valueOf()),n){case null:return"null";case!0:return"true";case!1:return"false"}return"string"==typeof n?g(n):"number"==typeof n?String(n):"object"==typeof n?Array.isArray(n)?function(e){if(o.indexOf(e)>=0)throw TypeError("Converting circular structure to JSON5");o.push(e);var t=l;l+=i;for(var n,r=[],u=0;u<e.length;u++){var a=p(String(u),e);r.push(void 0!==a?a:"null")}if(0===r.length)n="[]";else if(""===i)n="["+r.join(",")+"]";else{var s=",\n"+l,c=r.join(s);n="[\n"+l+c+",\n"+t+"]"}return o.pop(),l=t,n}(n):function(e){if(o.indexOf(e)>=0)throw TypeError("Converting circular structure to JSON5");o.push(e);var t=l;l+=i;for(var n,u,a=[],s=0,c=r||Object.keys(e);s<c.length;s+=1){var f=c[s],d=p(f,e);if(void 0!==d){var g=h(f)+":";""!==i&&(g+=" "),g+=d,a.push(g)}}if(0===a.length)n="{}";else if(""===i)n="{"+(u=a.join(","))+"}";else{var m=",\n"+l;u=a.join(m),n="{\n"+l+u+",\n"+t+"}"}return o.pop(),l=t,n}(n):void 0}function g(e){for(var t={"'":.1,'"':.2},n={"'":"\\'",'"':'\\"',"\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\v","\0":"\\0","\u2028":"\\u2028","\u2029":"\\u2029"},r="",u=0;u<e.length;u++){var o=e[u];switch(o){case"'":case'"':t[o]++,r+=o;continue;case"\0":if(X(e[u+1])){r+="\\x00";continue}}if(n[o])r+=n[o];else if(o<" "){var l=o.charCodeAt(0).toString(16);r+="\\x"+("00"+l).substring(l.length)}else r+=o}var i=a||Object.keys(t).reduce((function(e,n){return t[e]<t[n]?e:n}));return i+(r=r.replace(new RegExp(i,"g"),n[i]))+i}function h(e){if(0===e.length)return g(e);var t=String.fromCodePoint(e.codePointAt(0));if(!q(t))return g(e);for(var n=t.length;n<e.length;n++)if(!Z(String.fromCodePoint(e.codePointAt(n))))return g(e);return e}}}}()},9732:(e,t,n)=>{function r(e){if(e&&e.t)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,t}var u=r(n(7294));function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var o=["children","options"],l=["allowFullScreen","allowTransparency","autoComplete","autoFocus","autoPlay","cellPadding","cellSpacing","charSet","className","classId","colSpan","contentEditable","contextMenu","crossOrigin","encType","formAction","formEncType","formMethod","formNoValidate","formTarget","frameBorder","hrefLang","inputMode","keyParams","keyType","marginHeight","marginWidth","maxLength","mediaGroup","minLength","noValidate","radioGroup","readOnly","rowSpan","spellCheck","srcDoc","srcLang","srcSet","tabIndex","useMap"].reduce((function(e,t){return e[t.toLowerCase()]=t,e}),{for:"htmlFor"}),i={amp:"&",apos:"'",gt:">",lt:"<",nbsp:"Â ",quot:"â"},s=["style","script"],c=/([-A-Z0-9_:]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|(?:\{((?:\\.|{[^}]*?}|[^}])*)\})))?/gi,f=/mailto:/i,d=/\n{2,}$/,p=/^( *>[^\n]+(\n[^\n]+)*\n*)+\n{2,}/,g=/^ *> ?/gm,h=/^ {2,}\n/,m=/^(?:( *[-*_]) *){3,}(?:\n *)+\n/,D=/^\s*(`{3,}|~{3,}) *(\S+)? *\n([\s\S]+?)\s*\1 *(?:\n *)+\n?/,v=/^(?: {4}[^\n]+\n*)+(?:\n *)+\n?/,y=/^(`+)\s*([\s\S]*?[^`])\s*\1(?!`)/,b=/^(?:\n *)*\n/,C=/\r\n?/g,E=/^\[\^([^\]]+)](:.*)\n/,A=/^\[\^([^\]]+)]/,F=/\f/g,w=/^\s*?\[(x|\s)\]/,x=/^ *(#{1,6}) *([^\n]+?)(?: +#*)?(?:\n *)*(?:\n|$)/,k=/^([^\n]+)\n *(=|-){3,} *(?:\n *)+\n/,_=/^ *(?!<[a-z][^ >/]* ?\/>)<([a-z][^ >/]*) ?([^>]*)\/{0}>\n?(\s*(?:<\1[^>]*?>[\s\S]*?<\/\1>|(?!<\1)[\s\S])*?)<\/\1>\n*/i,S=/&([a-z]+);/g,B=/^<!--[\s\S]*?(?:-->)/,M=/^(data|aria|x)-[a-z_][a-z\d_.-]*$/,N=/^ *<([a-z][a-z0-9:]*)(?:\s+((?:<.*?>|[^>])*))?\/?>(?!<\/\1>)(\s*\n)?/i,P=/^\{.*\}$/,T=/^(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/,O=/^<([^ >]+@[^ >]+)>/,L=/^<([^ >]+:\/[^ >]+)>/,I=/ *\n+$/,j=/(?:^|\n)( *)$/,z=/-([a-z])?/gi,R=/^(.*\|?.*)\n *(\|? *[-:]+ *\|[-| :]*)\n((?:.*\|.*\n)*)\n?/,U=/^\[([^\]]*)\]:\s*(\S+)\s*("([^"]*)")?/,$=/^!\[([^\]]*)\] ?\[([^\]]*)\]/,H=/^\[([^\]]*)\] ?\[([^\]]*)\]/,V=/(\[|\])/g,W=/(\n|^[-*]\s|^#|^ {2,}|^-{2,}|^>\s)/,G=/\t/g,K=/^ *\| */,Q=/(^ *\||\| *$)/g,q=/ *$/,Z=/^ *:-+: *$/,X=/^ *:-+ *$/,Y=/^ *-+: *$/,J=/^([*_])\1((?:\[.*?\][([].*?[)\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\1\1(?!\1)/,ee=/^([*_])((?:\[.*?\][([].*?[)\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~+.*?~+|.)*?)\1(?!\1|\w)/,te=/^~~((?:\[.*?\]|<.*?>(?:.*?<.*?>)?|`.*?`|.)*?)~~/,ne=/^\\([^0-9A-Za-z\s])/,re=/^[\s\S]+?(?=[^0-9A-Z\s\u00c0-\uffff&;.()'"]|\d+\.|\n\n| {2,}\n|\w+:\S|$)/i,ue=/^\n+/,ae=/^([ \t]*)/,oe=/\\([^0-9A-Z\s])/gi,le=new RegExp("^( *)((?:[*+-]|\\d+\\.)) +"),ie=new RegExp("^( *)((?:[*+-]|\\d+\\.)) +[^\\n]*(?:\\n(?!\\1(?:[*+-]|\\d+\\.) )[^\\n]*)*(\\n|$)","gm"),se=new RegExp("^( *)((?:[*+-]|\\d+\\.)) [\\s\\S]+?(?:\\n{2,}(?! )(?!\\1(?:[*+-]|\\d+\\.) (?!(?:[*+-]|\\d+\\.) ))\\n*|\\s*\\n*$)"),ce="(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*",fe=new RegExp("^\\[("+ce+")\\]\\(\\s*<?((?:[^\\s\\\\]|\\\\.)*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*\\)"),de=new RegExp("^!\\[("+ce+")\\]\\(\\s*<?((?:[^\\s\\\\]|\\\\.)*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*\\)"),pe=[p,v,D,x,k,B,ie,se,R],ge=[].concat(pe,[/^[^\n]+(?:  \n|\n{2,})/,_,N]);function he(e){return e.replace(/[ÃÃÃÃÃÃÃ Ã¡Ã¢Ã£Ã¤Ã¥Ã¦Ã]/g,"a").replace(/[Ã§Ã]/g,"c").replace(/[Ã°Ã]/g,"d").replace(/[ÃÃÃÃÃ©Ã¨ÃªÃ«]/g,"e").replace(/[ÃÃ¯ÃÃ®ÃÃ­ÃÃ¬]/g,"i").replace(/[ÃÃ±]/g,"n").replace(/[Ã¸ÃÅÅÃÃµÃÃ´ÃÃ³ÃÃ²]/g,"o").replace(/[ÃÃ¼ÃÃ»ÃÃºÃÃ¹]/g,"u").replace(/[Å¸Ã¿ÃÃ½]/g,"y").replace(/[^a-z0-9- ]/gi,"").replace(/ /gi,"-").toLowerCase()}function me(e){return Y.test(e)?"right":Z.test(e)?"center":X.test(e)?"left":null}function De(e,t,n){var r=n.u;n.u=!0;var u=t(e.trim(),n);n.u=r;var a=[[]];return u.forEach((function(e,t){"tableSeparator"===e.type?0!==t&&t!==u.length-1&&a.push([]):("text"!==e.type||null!=u[t+1]&&"tableSeparator"!==u[t+1].type||(e.content=e.content.replace(q,"")),a[a.length-1].push(e))})),a}function ve(e,t,n){n.o=!0;var r=De(e[1],t,n),u=e[2].replace(Q,"").split("|").map(me),a=function(e,t,n){return e.trim().split("\n").map((function(e){return De(e,t,n)}))}(e[3],t,n);return n.o=!1,{align:u,cells:a,header:r,type:"table"}}function ye(e,t){return null==e.align[t]?{}:{textAlign:e.align[t]}}function be(e){return function(t,n){return n.o?e.exec(t):null}}function Ce(e){return function(t,n){return n.o||n.i?e.exec(t):null}}function Ee(e){return function(t,n){return n.o||n.i?null:e.exec(t)}}function Ae(e){return function(t){return e.exec(t)}}function Fe(e,t,n){if(t.o||t.i)return null;if(n&&!n.endsWith("\n"))return null;var r="";e.split("\n").every((function(e){return!pe.some((function(t){return t.test(e)}))&&(r+=e+"\n",e.trim())}));var u=r.trimEnd();return""==u?null:[r,u]}function we(e){try{if(decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g,"").match(/^\s*(javascript|vbscript|data):/i))return null}catch(e){return null}return e}function xe(e){return e.replace(oe,"$1")}function ke(e,t,n){var r=n.o||!1,u=n.i||!1;n.o=!0,n.i=!0;var a=e(t,n);return n.o=r,n.i=u,a}function _e(e,t,n){var r=n.o||!1,u=n.i||!1;n.o=!1,n.i=!0;var a=e(t,n);return n.o=r,n.i=u,a}function Se(e,t,n){return n.o=!1,e(t+"\n\n",n)}var Be,Me=function(e,t,n){return{content:ke(t,e[1],n)}};function Ne(){return{}}function Pe(){return null}function Te(){return[].slice.call(arguments).filter(Boolean).join(" ")}function Oe(e,t,n){for(var r=e,u=t.split(".");u.length&&void 0!==(r=r[u[0]]);)u.shift();return r||n}function Le(e,t){var n=Oe(t,e);return n?"function"==typeof n||"object"==typeof n&&"render"in n?n:Oe(t,e+".component",e):e}function Ie(e,t){void 0===t&&(t={}),t.overrides=t.overrides||{},t.slugify=t.slugify||he,t.namedCodesToUnicode=t.namedCodesToUnicode?a({},i,t.namedCodesToUnicode):i;var n=t.createElement||u.createElement;function r(e,r){var u=Oe(t.overrides,e+".props",{});return n.apply(void 0,[Le(e,t.overrides),a({},r,u,{className:Te(null==r?void 0:r.className,u.className)||void 0})].concat([].slice.call(arguments,2)))}function o(e){var n=!1;t.forceInline?n=!0:t.forceBlock||(n=!1===W.test(e));for(var a=ce(oe(n?e:e.trimEnd().replace(ue,"")+"\n\n",{o:n}));"string"==typeof a[a.length-1]&&!a[a.length-1].trim();)a.pop();if(null===t.wrapper)return a;var o,l=t.wrapper||(n?"span":"div");if(a.length>1||t.forceWrapper)o=a;else{if(1===a.length)return"string"==typeof(o=a[0])?r("span",{key:"outer"},o):o;o=null}return u.createElement(l,{key:"outer"},o)}function Q(e){var t=e.match(c);return t?t.reduce((function(e,t,n){var r=t.indexOf("=");if(-1!==r){var a=function(e){return-1!==e.indexOf("-")&&null===e.match(M)&&(e=e.replace(z,(function(e,t){return t.toUpperCase()}))),e}(t.slice(0,r)).trim(),i=function(e){var t=e[0];return('"'===t||"'"===t)&&e.length>=2&&e[e.length-1]===t?e.slice(1,-1):e}(t.slice(r+1).trim()),s=l[a]||a,c=e[s]=function(e,t){return"style"===e?t.split(/;\s?/).reduce((function(e,t){var n=t.slice(0,t.indexOf(":"));return e[n.replace(/(-[a-z])/g,(function(e){return e[1].toUpperCase()}))]=t.slice(n.length+1).trim(),e}),{}):"href"===e?we(t):(t.match(P)&&(t=t.slice(1,t.length-1)),"true"===t||"false"!==t&&t)}(a,i);"string"==typeof c&&(_.test(c)||N.test(c))&&(e[s]=u.cloneElement(o(c.trim()),{key:n}))}else"style"!==t&&(e[l[t]||t]=!0);return e}),{}):void 0}var q=[],Z={},X={blockQuote:{l:Ee(p),_:Be.HIGH,p:function(e,t,n){return{content:t(e[0].replace(g,""),n)}},g:function(e,t,n){return r("blockquote",{key:n.m},t(e.content,n))}},breakLine:{l:Ae(h),_:Be.HIGH,p:Ne,g:function(e,t,n){return r("br",{key:n.m})}},breakThematic:{l:Ee(m),_:Be.HIGH,p:Ne,g:function(e,t,n){return r("hr",{key:n.m})}},codeBlock:{l:Ee(v),_:Be.MAX,p:function(e){return{content:e[0].replace(/^ {4}/gm,"").replace(/\n+$/,""),lang:void 0}},g:function(e,t,n){return r("pre",{key:n.m},r("code",{className:e.lang?"lang-"+e.lang:""},e.content))}},codeFenced:{l:Ee(D),_:Be.MAX,p:function(e){return{content:e[3],lang:e[2]||void 0,type:"codeBlock"}}},codeInline:{l:Ce(y),_:Be.LOW,p:function(e){return{content:e[2]}},g:function(e,t,n){return r("code",{key:n.m},e.content)}},footnote:{l:Ee(E),_:Be.MAX,p:function(e){return q.push({footnote:e[2],identifier:e[1]}),{}},g:Pe},footnoteReference:{l:be(A),_:Be.HIGH,p:function(e){return{content:e[1],target:"#"+t.slugify(e[1])}},g:function(e,t,n){return r("a",{key:n.m,href:we(e.target)},r("sup",{key:n.m},e.content))}},gfmTask:{l:be(w),_:Be.HIGH,p:function(e){return{completed:"x"===e[1].toLowerCase()}},g:function(e,t,n){return r("input",{checked:e.completed,key:n.m,readOnly:!0,type:"checkbox"})}},heading:{l:Ee(x),_:Be.HIGH,p:function(e,n,r){return{content:ke(n,e[2],r),id:t.slugify(e[2]),level:e[1].length}},g:function(e,t,n){return e.tag="h"+e.level,r(e.tag,{id:e.id,key:n.m},t(e.content,n))}},headingSetext:{l:Ee(k),_:Be.MAX,p:function(e,t,n){return{content:ke(t,e[1],n),level:"="===e[2]?1:2,type:"heading"}}},htmlComment:{l:Ae(B),_:Be.HIGH,p:function(){return{}},g:Pe},image:{l:Ce(de),_:Be.HIGH,p:function(e){return{alt:e[1],target:xe(e[2]),title:e[3]}},g:function(e,t,n){return r("img",{key:n.m,alt:e.alt||void 0,title:e.title||void 0,src:we(e.target)})}},link:{l:be(fe),_:Be.LOW,p:function(e,t,n){return{content:_e(t,e[1],n),target:xe(e[2]),title:e[3]}},g:function(e,t,n){return r("a",{key:n.m,href:we(e.target),title:e.title},t(e.content,n))}},linkAngleBraceStyleDetector:{l:be(L),_:Be.MAX,p:function(e){return{content:[{content:e[1],type:"text"}],target:e[1],type:"link"}}},linkBareUrlDetector:{l:function(e,t){return t.v?null:be(T)(e,t)},_:Be.MAX,p:function(e){return{content:[{content:e[1],type:"text"}],target:e[1],title:void 0,type:"link"}}},linkMailtoDetector:{l:be(O),_:Be.MAX,p:function(e){var t=e[1],n=e[1];return f.test(n)||(n="mailto:"+n),{content:[{content:t.replace("mailto:",""),type:"text"}],target:n,type:"link"}}},list:{l:function(e,t,n){var r=j.exec(n);return!r||!t.h&&t.o?null:se.exec(e=r[1]+e)},_:Be.HIGH,p:function(e,t,n){var r=e[2],u=r.length>1,a=u?+r:void 0,o=e[0].replace(d,"\n").match(ie),l=!1;return{items:o.map((function(e,r){var u=le.exec(e)[0].length,a=new RegExp("^ {1,"+u+"}","gm"),i=e.replace(a,"").replace(le,""),s=r===o.length-1,c=-1!==i.indexOf("\n\n")||s&&l;l=c;var f,d=n.o,p=n.h;n.h=!0,c?(n.o=!1,f=i.replace(I,"\n\n")):(n.o=!0,f=i.replace(I,""));var g=t(f,n);return n.o=d,n.h=p,g})),ordered:u,start:a}},g:function(e,t,n){return r(e.ordered?"ol":"ul",{key:n.m,start:e.start},e.items.map((function(e,u){return r("li",{key:u},t(e,n))})))}},newlineCoalescer:{l:Ee(b),_:Be.LOW,p:Ne,g:function(){return"\n"}},paragraph:{l:Fe,_:Be.LOW,p:Me,g:function(e,t,n){return r("p",{key:n.m},t(e.content,n))}},ref:{l:be(U),_:Be.MAX,p:function(e){return Z[e[1]]={target:e[2],title:e[4]},{}},g:Pe},refImage:{l:Ce($),_:Be.MAX,p:function(e){return{alt:e[1]||void 0,ref:e[2]}},g:function(e,t,n){return r("img",{key:n.m,alt:e.alt,src:we(Z[e.ref].target),title:Z[e.ref].title})}},refLink:{l:be(H),_:Be.MAX,p:function(e,t,n){return{content:t(e[1],n),fallbackContent:t(e[0].replace(V,"\\$1"),n),ref:e[2]}},g:function(e,t,n){return Z[e.ref]?r("a",{key:n.m,href:we(Z[e.ref].target),title:Z[e.ref].title},t(e.content,n)):r("span",{key:n.m},t(e.fallbackContent,n))}},table:{l:Ee(R),_:Be.HIGH,p:ve,g:function(e,t,n){return r("table",{key:n.m},r("thead",null,r("tr",null,e.header.map((function(u,a){return r("th",{key:a,style:ye(e,a)},t(u,n))})))),r("tbody",null,e.cells.map((function(u,a){return r("tr",{key:a},u.map((function(u,a){return r("td",{key:a,style:ye(e,a)},t(u,n))})))}))))}},tableSeparator:{l:function(e,t){return t.u?K.exec(e):null},_:Be.HIGH,p:function(){return{type:"tableSeparator"}},g:function(){return" | "}},text:{l:Ae(re),_:Be.MIN,p:function(e){return{content:e[0].replace(S,(function(e,n){return t.namedCodesToUnicode[n]?t.namedCodesToUnicode[n]:e}))}},g:function(e){return e.content}},textBolded:{l:Ce(J),_:Be.MED,p:function(e,t,n){return{content:t(e[2],n)}},g:function(e,t,n){return r("strong",{key:n.m},t(e.content,n))}},textEmphasized:{l:Ce(ee),_:Be.LOW,p:function(e,t,n){return{content:t(e[2],n)}},g:function(e,t,n){return r("em",{key:n.m},t(e.content,n))}},textEscaped:{l:Ce(ne),_:Be.HIGH,p:function(e){return{content:e[1],type:"text"}}},textStrikethroughed:{l:Ce(te),_:Be.LOW,p:Me,g:function(e,t,n){return r("del",{key:n.m},t(e.content,n))}}};!0!==t.disableParsingRawHTML&&(X.htmlBlock={l:Ae(_),_:Be.HIGH,p:function(e,t,n){var r,u=e[3].match(ae),a=new RegExp("^"+u[1],"gm"),o=e[3].replace(a,""),l=(r=o,ge.some((function(e){return e.test(r)}))?Se:ke),i=e[1].toLowerCase(),c=-1!==s.indexOf(i);n.v=n.v||"a"===i;var f=c?e[3]:l(t,o,n);return n.v=!1,{attrs:Q(e[2]),content:f,noInnerParse:c,tag:c?i:e[1]}},g:function(e,t,n){return r(e.tag,a({key:n.m},e.attrs),e.noInnerParse?e.content:t(e.content,n))}},X.htmlSelfClosing={l:Ae(N),_:Be.HIGH,p:function(e){return{attrs:Q(e[2]||""),tag:e[1]}},g:function(e,t,n){return r(e.tag,a({},e.attrs,{key:n.m}))}});var Y,oe=function(e){var t=Object.keys(e);function n(r,u){for(var a=[],o="";r;)for(var l=0;l<t.length;){var i=t[l],s=e[i],c=s.l(r,u,o);if(c){var f=c[0];r=r.substring(f.length);var d=s.p(c,n,u);null==d.type&&(d.type=i),a.push(d),o=f;break}l++}return a}return t.sort((function(t,n){var r=e[t]._,u=e[n]._;return r!==u?r-u:t<n?-1:1})),function(e,t){return n(function(e){return e.replace(C,"\n").replace(F,"").replace(G,"    ")}(e),t)}}(X),ce=(Y=function(e){return function(t,n,r){return e[t.type].g(t,n,r)}}(X),function e(t,n){if(void 0===n&&(n={}),Array.isArray(t)){for(var r=n.m,u=[],a=!1,o=0;o<t.length;o++){n.m=o;var l=e(t[o],n),i="string"==typeof l;i&&a?u[u.length-1]+=l:null!==l&&u.push(l),a=i}return n.m=r,u}return Y(t,e,n)}),pe=o(e);return q.length?r("div",null,pe,r("footer",{key:"footer"},q.map((function(e){return r("div",{id:t.slugify(e.identifier),key:e.identifier},e.identifier,ce(oe(e.footnote,{o:!0})))})))):pe}!function(e){e[e.MAX=0]="MAX",e[e.HIGH=1]="HIGH",e[e.MED=2]="MED",e[e.LOW=3]="LOW",e[e.MIN=4]="MIN"}(Be||(Be={}));var je=function(e){var t=e.children,n=e.options,r=function(e,t){if(null==e)return{};var n,r,u={},a=Object.keys(e);for(r=0;r<a.length;r++)t.indexOf(n=a[r])>=0||(u[n]=e[n]);return u}(e,o);return u.cloneElement(Ie(t,n),r)};Object.assign(je,{compiler:Ie}),e.exports=je},5660:(e,t,n)=>{var r=function(e){var t=/(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i,n=0,r={},u={manual:e.Prism&&e.Prism.manual,disableWorkerMessageHandler:e.Prism&&e.Prism.disableWorkerMessageHandler,util:{encode:function e(t){return t instanceof a?new a(t.type,e(t.content),t.alias):Array.isArray(t)?t.map(e):t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++n}),e.__id},clone:function e(t,n){var r,a;switch(n=n||{},u.util.type(t)){case"Object":if(a=u.util.objId(t),n[a])return n[a];for(var o in r={},n[a]=r,t)t.hasOwnProperty(o)&&(r[o]=e(t[o],n));return r;case"Array":return a=u.util.objId(t),n[a]?n[a]:(r=[],n[a]=r,t.forEach((function(t,u){r[u]=e(t,n)})),r);default:return t}},getLanguage:function(e){for(;e;){var n=t.exec(e.className);if(n)return n[1].toLowerCase();e=e.parentElement}return"none"},setLanguage:function(e,n){e.className=e.className.replace(RegExp(t,"gi"),""),e.classList.add("language-"+n)},currentScript:function(){if("undefined"==typeof document)return null;if("currentScript"in document)return document.currentScript;try{throw new Error}catch(r){var e=(/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(r.stack)||[])[1];if(e){var t=document.getElementsByTagName("script");for(var n in t)if(t[n].src==e)return t[n]}return null}},isActive:function(e,t,n){for(var r="no-"+t;e;){var u=e.classList;if(u.contains(t))return!0;if(u.contains(r))return!1;e=e.parentElement}return!!n}},languages:{plain:r,plaintext:r,text:r,txt:r,extend:function(e,t){var n=u.util.clone(u.languages[e]);for(var r in t)n[r]=t[r];return n},insertBefore:function(e,t,n,r){var a=(r=r||u.languages)[e],o={};for(var l in a)if(a.hasOwnProperty(l)){if(l==t)for(var i in n)n.hasOwnProperty(i)&&(o[i]=n[i]);n.hasOwnProperty(l)||(o[l]=a[l])}var s=r[e];return r[e]=o,u.languages.DFS(u.languages,(function(t,n){n===s&&t!=e&&(this[t]=o)})),o},DFS:function e(t,n,r,a){a=a||{};var o=u.util.objId;for(var l in t)if(t.hasOwnProperty(l)){n.call(t,l,t[l],r||l);var i=t[l],s=u.util.type(i);"Object"!==s||a[o(i)]?"Array"!==s||a[o(i)]||(a[o(i)]=!0,e(i,n,l,a)):(a[o(i)]=!0,e(i,n,null,a))}}},plugins:{},highlightAll:function(e,t){u.highlightAllUnder(document,e,t)},highlightAllUnder:function(e,t,n){var r={callback:n,container:e,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};u.hooks.run("before-highlightall",r),r.elements=Array.prototype.slice.apply(r.container.querySelectorAll(r.selector)),u.hooks.run("before-all-elements-highlight",r);for(var a,o=0;a=r.elements[o++];)u.highlightElement(a,!0===t,r.callback)},highlightElement:function(t,n,r){var a=u.util.getLanguage(t),o=u.languages[a];u.util.setLanguage(t,a);var l=t.parentElement;l&&"pre"===l.nodeName.toLowerCase()&&u.util.setLanguage(l,a);var i={element:t,language:a,grammar:o,code:t.textContent};function s(e){i.highlightedCode=e,u.hooks.run("before-insert",i),i.element.innerHTML=i.highlightedCode,u.hooks.run("after-highlight",i),u.hooks.run("complete",i),r&&r.call(i.element)}if(u.hooks.run("before-sanity-check",i),(l=i.element.parentElement)&&"pre"===l.nodeName.toLowerCase()&&!l.hasAttribute("tabindex")&&l.setAttribute("tabindex","0"),!i.code)return u.hooks.run("complete",i),void(r&&r.call(i.element));if(u.hooks.run("before-highlight",i),i.grammar)if(n&&e.Worker){var c=new Worker(u.filename);c.onmessage=function(e){s(e.data)},c.postMessage(JSON.stringify({language:i.language,code:i.code,immediateClose:!0}))}else s(u.highlight(i.code,i.grammar,i.language));else s(u.util.encode(i.code))},highlight:function(e,t,n){var r={code:e,grammar:t,language:n};if(u.hooks.run("before-tokenize",r),!r.grammar)throw new Error('The language "'+r.language+'" has no grammar.');return r.tokens=u.tokenize(r.code,r.grammar),u.hooks.run("after-tokenize",r),a.stringify(u.util.encode(r.tokens),r.language)},tokenize:function(e,t){var n=t.rest;if(n){for(var r in n)t[r]=n[r];delete t.rest}var u=new i;return s(u,u.head,e),l(e,u,t,u.head,0),function(e){for(var t=[],n=e.head.next;n!==e.tail;)t.push(n.value),n=n.next;return t}(u)},hooks:{all:{},add:function(e,t){var n=u.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=u.hooks.all[e];if(n&&n.length)for(var r,a=0;r=n[a++];)r(t)}},Token:a};function a(e,t,n,r){this.type=e,this.content=t,this.alias=n,this.length=0|(r||"").length}function o(e,t,n,r){e.lastIndex=t;var u=e.exec(n);if(u&&r&&u[1]){var a=u[1].length;u.index+=a,u[0]=u[0].slice(a)}return u}function l(e,t,n,r,i,f){for(var d in n)if(n.hasOwnProperty(d)&&n[d]){var p=n[d];p=Array.isArray(p)?p:[p];for(var g=0;g<p.length;++g){if(f&&f.cause==d+","+g)return;var h=p[g],m=h.inside,D=!!h.lookbehind,v=!!h.greedy,y=h.alias;if(v&&!h.pattern.global){var b=h.pattern.toString().match(/[imsuy]*$/)[0];h.pattern=RegExp(h.pattern.source,b+"g")}for(var C=h.pattern||h,E=r.next,A=i;E!==t.tail&&!(f&&A>=f.reach);A+=E.value.length,E=E.next){var F=E.value;if(t.length>e.length)return;if(!(F instanceof a)){var w,x=1;if(v){if(!(w=o(C,A,e,D))||w.index>=e.length)break;var k=w.index,_=w.index+w[0].length,S=A;for(S+=E.value.length;k>=S;)S+=(E=E.next).value.length;if(A=S-=E.value.length,E.value instanceof a)continue;for(var B=E;B!==t.tail&&(S<_||"string"==typeof B.value);B=B.next)x++,S+=B.value.length;x--,F=e.slice(A,S),w.index-=A}else if(!(w=o(C,0,F,D)))continue;k=w.index;var M=w[0],N=F.slice(0,k),P=F.slice(k+M.length),T=A+F.length;f&&T>f.reach&&(f.reach=T);var O=E.prev;if(N&&(O=s(t,O,N),A+=N.length),c(t,O,x),E=s(t,O,new a(d,m?u.tokenize(M,m):M,y,M)),P&&s(t,E,P),x>1){var L={cause:d+","+g,reach:T};l(e,t,n,E.prev,A,L),f&&L.reach>f.reach&&(f.reach=L.reach)}}}}}}function i(){var e={value:null,prev:null,next:null},t={value:null,prev:e,next:null};e.next=t,this.head=e,this.tail=t,this.length=0}function s(e,t,n){var r=t.next,u={value:n,prev:t,next:r};return t.next=u,r.prev=u,e.length++,u}function c(e,t,n){for(var r=t.next,u=0;u<n&&r!==e.tail;u++)r=r.next;t.next=r,r.prev=t,e.length-=u}if(e.Prism=u,a.stringify=function e(t,n){if("string"==typeof t)return t;if(Array.isArray(t)){var r="";return t.forEach((function(t){r+=e(t,n)})),r}var a={type:t.type,content:e(t.content,n),tag:"span",classes:["token",t.type],attributes:{},language:n},o=t.alias;o&&(Array.isArray(o)?Array.prototype.push.apply(a.classes,o):a.classes.push(o)),u.hooks.run("wrap",a);var l="";for(var i in a.attributes)l+=" "+i+'="'+(a.attributes[i]||"").replace(/"/g,"&quot;")+'"';return"<"+a.tag+' class="'+a.classes.join(" ")+'"'+l+">"+a.content+"</"+a.tag+">"},!e.document)return e.addEventListener?(u.disableWorkerMessageHandler||e.addEventListener("message",(function(t){var n=JSON.parse(t.data),r=n.language,a=n.code,o=n.immediateClose;e.postMessage(u.highlight(a,u.languages[r],r)),o&&e.close()}),!1),u):u;var f=u.util.currentScript();function d(){u.manual||u.highlightAll()}if(f&&(u.filename=f.src,f.hasAttribute("data-manual")&&(u.manual=!0)),!u.manual){var p=document.readyState;"loading"===p||"interactive"===p&&f&&f.defer?document.addEventListener("DOMContentLoaded",d):window.requestAnimationFrame?window.requestAnimationFrame(d):window.setTimeout(d,16)}return u}("undefined"!=typeof window?window:"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope?self:{});e.exports&&(e.exports=r),void 0!==n.g&&(n.g.Prism=r),r.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},r.languages.markup.tag.inside["attr-value"].inside.entity=r.languages.markup.entity,r.languages.markup.doctype.inside["internal-subset"].inside=r.languages.markup,r.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),Object.defineProperty(r.languages.markup.tag,"addInlined",{value:function(e,t){var n={};n["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:r.languages[t]},n.cdata=/^<!\[CDATA\[|\]\]>$/i;var u={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:n}};u["language-"+t]={pattern:/[\s\S]+/,inside:r.languages[t]};var a={};a[e]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,(function(){return e})),"i"),lookbehind:!0,greedy:!0,inside:u},r.languages.insertBefore("markup","cdata",a)}}),Object.defineProperty(r.languages.markup.tag,"addAttribute",{value:function(e,t){r.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+e+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[t,"language-"+t],inside:r.languages[t]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),r.languages.html=r.languages.markup,r.languages.mathml=r.languages.markup,r.languages.svg=r.languages.markup,r.languages.xml=r.languages.extend("markup",{}),r.languages.ssml=r.languages.xml,r.languages.atom=r.languages.xml,r.languages.rss=r.languages.xml,function(e){var t=/(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+t.source+"|"+/(?:[^\\\r\n()"']|\\[\s\S])*/.source+")\\)","i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+t.source+"$"),alias:"url"}}},selector:{pattern:RegExp("(^|[{}\\s])[^{}\\s](?:[^{};\"'\\s]|\\s+(?![\\s{])|"+t.source+")*(?=\\s*\\{)"),lookbehind:!0},string:{pattern:t,greedy:!0},property:{pattern:/(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,lookbehind:!0},important:/!important\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,lookbehind:!0},punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var n=e.languages.markup;n&&(n.tag.addInlined("style","css"),n.tag.addAttribute("style","css"))}(r),r.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,boolean:/\b(?:false|true)\b/,function:/\b\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/},r.languages.javascript=r.languages.extend("clike",{"class-name":[r.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:{pattern:RegExp(/(^|[^\w$])/.source+"(?:"+/NaN|Infinity/.source+"|"+/0[bB][01]+(?:_[01]+)*n?/.source+"|"+/0[oO][0-7]+(?:_[0-7]+)*n?/.source+"|"+/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source+"|"+/\d+(?:_\d+)*n/.source+"|"+/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source+")"+/(?![\w$])/.source),lookbehind:!0},operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),r.languages.javascript["class-name"][0].pattern=/(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/,r.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:r.languages.regex},"regex-delimiter":/^\/|\/$/,"regex-flags":/^[a-z]+$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:r.languages.javascript},{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,lookbehind:!0,inside:r.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:r.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:r.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),r.languages.insertBefore("javascript","string",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:"comment"},"template-string":{pattern:/`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:r.languages.javascript}},string:/[\s\S]+/}},"string-property":{pattern:/((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,lookbehind:!0,greedy:!0,alias:"property"}}),r.languages.insertBefore("javascript","operator",{"literal-property":{pattern:/((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,lookbehind:!0,alias:"property"}}),r.languages.markup&&(r.languages.markup.tag.addInlined("script","javascript"),r.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,"javascript")),r.languages.js=r.languages.javascript,function(){if(void 0!==r&&"undefined"!=typeof document){Element.prototype.matches||(Element.prototype.matches=Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector);var e={js:"javascript",py:"python",rb:"ruby",ps1:"powershell",psm1:"powershell",sh:"bash",bat:"batch",h:"c",tex:"latex"},t="data-src-status",n="loaded",u='pre[data-src]:not([data-src-status="loaded"]):not([data-src-status="loading"])';r.hooks.add("before-highlightall",(function(e){e.selector+=", "+u})),r.hooks.add("before-sanity-check",(function(a){var o=a.element;if(o.matches(u)){a.code="",o.setAttribute(t,"loading");var l=o.appendChild(document.createElement("CODE"));l.textContent="Loadingâ¦";var i=o.getAttribute("data-src"),s=a.language;if("none"===s){var c=(/\.(\w+)$/.exec(i)||[,"none"])[1];s=e[c]||c}r.util.setLanguage(l,s),r.util.setLanguage(o,s);var f=r.plugins.autoloader;f&&f.loadLanguages(s),function(e,u,a){var i=new XMLHttpRequest;i.open("GET",e,!0),i.onreadystatechange=function(){4==i.readyState&&(i.status<400&&i.responseText?function(e){o.setAttribute(t,n);var u=function(e){var t=/^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(e||"");if(t){var n=Number(t[1]),r=t[2],u=t[3];return r?u?[n,Number(u)]:[n,void 0]:[n,n]}}(o.getAttribute("data-range"));if(u){var a=e.split(/\r\n?|\n/g),i=u[0],s=null==u[1]?a.length:u[1];i<0&&(i+=a.length),i=Math.max(0,Math.min(i-1,a.length)),s<0&&(s+=a.length),s=Math.max(0,Math.min(s,a.length)),e=a.slice(i,s).join("\n"),o.hasAttribute("data-start")||o.setAttribute("data-start",String(i+1))}l.textContent=e,r.highlightElement(l)}(i.responseText):i.status>=400?a("â Error "+i.status+" while fetching file: "+i.statusText):a("â Error: File does not exist or is empty"))},i.send(null)}(i,0,(function(e){o.setAttribute(t,"failed"),l.textContent=e}))}})),r.plugins.fileHighlight={highlight:function(e){for(var t,n=(e||document).querySelectorAll(u),a=0;t=n[a++];)r.highlightElement(t)}};var a=!1;r.fileHighlight=function(){a||(console.warn("Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead."),a=!0),r.plugins.fileHighlight.highlight.apply(this,arguments)}}}()},4448:(e,t,n)=>{"use strict";var r=n(7294),u=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var o=new Set,l={};function i(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)o.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},g={};function h(e,t,n,r,u,a,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=u,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=o}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new h(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new h(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new h(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new h(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new h(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new h(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new h(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new h(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new h(e,5,!1,e.toLowerCase(),null,!1,!1)}));var D=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function y(e,t,n,r){var u=m.hasOwnProperty(t)?m[t]:null;(null!==u?0!==u.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,u,r)&&(n=null),r||null===u?function(e){return!!f.call(g,e)||!f.call(p,e)&&(d.test(e)?g[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):u.mustUseProperty?e[u.propertyName]=null===n?3!==u.type&&"":n:(t=u.attributeName,r=u.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(u=u.type)||4===u&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(D,v);m[t]=new h(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(D,v);m[t]=new h(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(D,v);m[t]=new h(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new h(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new h("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new h(e,1,!1,e.toLowerCase(),null,!0,!0)}));var b=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,C=Symbol.for("react.element"),E=Symbol.for("react.portal"),A=Symbol.for("react.fragment"),F=Symbol.for("react.strict_mode"),w=Symbol.for("react.profiler"),x=Symbol.for("react.provider"),k=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),S=Symbol.for("react.suspense"),B=Symbol.for("react.suspense_list"),M=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var P=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var T=Symbol.iterator;function O(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=T&&e[T]||e["@@iterator"])?e:null}var L,I=Object.assign;function j(e){if(void 0===L)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);L=t&&t[1]||""}return"\n"+L+e}var z=!1;function R(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var u=t.stack.split("\n"),a=r.stack.split("\n"),o=u.length-1,l=a.length-1;1<=o&&0<=l&&u[o]!==a[l];)l--;for(;1<=o&&0<=l;o--,l--)if(u[o]!==a[l]){if(1!==o||1!==l)do{if(o--,0>--l||u[o]!==a[l]){var i="\n"+u[o].replace(" at new "," at ");return e.displayName&&i.includes("<anonymous>")&&(i=i.replace("<anonymous>",e.displayName)),i}}while(1<=o&&0<=l);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?j(e):""}function U(e){switch(e.tag){case 5:return j(e.type);case 16:return j("Lazy");case 13:return j("Suspense");case 19:return j("SuspenseList");case 0:case 2:case 15:return R(e.type,!1);case 11:return R(e.type.render,!1);case 1:return R(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case A:return"Fragment";case E:return"Portal";case w:return"Profiler";case F:return"StrictMode";case S:return"Suspense";case B:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case k:return(e.displayName||"Context")+".Consumer";case x:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case M:return null!==(t=e.displayName||null)?t:$(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return $(t);case 8:return t===F?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var u=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return u.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function q(e,t){var n=t.checked;return I({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Z(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&y(e,"checked",t,!1)}function Y(e,t){X(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var u=0;u<n.length;u++)t["$"+n[u]]=!0;for(n=0;n<e.length;n++)u=t.hasOwnProperty("$"+e[n].value),e[n].selected!==u&&(e[n].selected=u),u&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,u=0;u<e.length;u++){if(e[u].value===n)return e[u].selected=!0,void(r&&(e[u].defaultSelected=!0));null!==t||e[u].disabled||(t=e[u])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return I({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function ae(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function oe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ie(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ge=["Webkit","ms","Moz","O"];function he(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),u=he(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,u):e[n]=u}}Object.keys(pe).forEach((function(e){ge.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var De=I({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ve(e,t){if(t){if(De[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var be=null;function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ee=null,Ae=null,Fe=null;function we(e){if(e=mu(e)){if("function"!=typeof Ee)throw Error(a(280));var t=e.stateNode;t&&(t=vu(t),Ee(e.stateNode,e.type,t))}}function xe(e){Ae?Fe?Fe.push(e):Fe=[e]:Ae=e}function ke(){if(Ae){var e=Ae,t=Fe;if(Fe=Ae=null,we(e),t)for(e=0;e<t.length;e++)we(t[e])}}function _e(e,t){return e(t)}function Se(){}var Be=!1;function Me(e,t,n){if(Be)return e(t,n);Be=!0;try{return _e(e,t,n)}finally{Be=!1,(null!==Ae||null!==Fe)&&(Se(),ke())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var r=vu(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Pe=!1;if(c)try{var Te={};Object.defineProperty(Te,"passive",{get:function(){Pe=!0}}),window.addEventListener("test",Te,Te),window.removeEventListener("test",Te,Te)}catch(ce){Pe=!1}function Oe(e,t,n,r,u,a,o,l,i){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Le=!1,Ie=null,je=!1,ze=null,Re={onError:function(e){Le=!0,Ie=e}};function Ue(e,t,n,r,u,a,o,l,i){Le=!1,Ie=null,Oe.apply(Re,arguments)}function $e(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if($e(e)!==e)throw Error(a(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=$e(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var u=n.return;if(null===u)break;var o=u.alternate;if(null===o){if(null!==(r=u.return)){n=r;continue}break}if(u.child===o.child){for(o=u.child;o;){if(o===n)return Ve(u),e;if(o===r)return Ve(u),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=u,r=o;else{for(var l=!1,i=u.child;i;){if(i===n){l=!0,n=u,r=o;break}if(i===r){l=!0,r=u,n=o;break}i=i.sibling}if(!l){for(i=o.child;i;){if(i===n){l=!0,n=o,r=u;break}if(i===r){l=!0,r=o,n=u;break}i=i.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ge(e);if(null!==t)return t;e=e.sibling}return null}var Ke=u.unstable_scheduleCallback,Qe=u.unstable_cancelCallback,qe=u.unstable_shouldYield,Ze=u.unstable_requestPaint,Xe=u.unstable_now,Ye=u.unstable_getCurrentPriorityLevel,Je=u.unstable_ImmediatePriority,et=u.unstable_UserBlockingPriority,tt=u.unstable_NormalPriority,nt=u.unstable_LowPriority,rt=u.unstable_IdlePriority,ut=null,at=null,ot=Math.clz32?Math.clz32:function(e){return 0==(e>>>=0)?32:31-(lt(e)/it|0)|0},lt=Math.log,it=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,u=e.suspendedLanes,a=e.pingedLanes,o=268435455&n;if(0!==o){var l=o&~u;0!==l?r=ft(l):0!=(a&=o)&&(r=ft(a))}else 0!=(o=n&~u)?r=ft(o):0!==a&&(r=ft(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&u)&&((u=r&-r)>=(a=t&-t)||16===u&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)u=1<<(n=31-ot(t)),r|=e[n],t&=~u;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function gt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function ht(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function mt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-ot(t)]=n}function Dt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ot(n),u=1<<r;u&t|e[r]&t&&(e[r]|=t),n&=~u}}var vt=0;function yt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var bt,Ct,Et,At,Ft,wt=!1,xt=[],kt=null,_t=null,St=null,Bt=new Map,Mt=new Map,Nt=[],Pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Tt(e,t){switch(e){case"focusin":case"focusout":kt=null;break;case"dragenter":case"dragleave":_t=null;break;case"mouseover":case"mouseout":St=null;break;case"pointerover":case"pointerout":Bt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Mt.delete(t.pointerId)}}function Ot(e,t,n,r,u,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[u]},null!==t&&null!==(t=mu(t))&&Ct(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==u&&-1===t.indexOf(u)&&t.push(u),e)}function Lt(e){var t=hu(e.target);if(null!==t){var n=$e(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void Ft(e.priority,(function(){Et(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Kt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=mu(n))&&Ct(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);be=r,n.target.dispatchEvent(r),be=null,t.shift()}return!0}function jt(e,t,n){It(e)&&n.delete(t)}function zt(){wt=!1,null!==kt&&It(kt)&&(kt=null),null!==_t&&It(_t)&&(_t=null),null!==St&&It(St)&&(St=null),Bt.forEach(jt),Mt.forEach(jt)}function Rt(e,t){e.blockedOn===t&&(e.blockedOn=null,wt||(wt=!0,u.unstable_scheduleCallback(u.unstable_NormalPriority,zt)))}function Ut(e){function t(t){return Rt(t,e)}if(0<xt.length){Rt(xt[0],e);for(var n=1;n<xt.length;n++){var r=xt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==kt&&Rt(kt,e),null!==_t&&Rt(_t,e),null!==St&&Rt(St,e),Bt.forEach(t),Mt.forEach(t),n=0;n<Nt.length;n++)(r=Nt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Nt.length&&null===(n=Nt[0]).blockedOn;)Lt(n),null===n.blockedOn&&Nt.shift()}var $t=b.ReactCurrentBatchConfig;function Ht(e,t,n,r){var u=vt,a=$t.transition;$t.transition=null;try{vt=1,Wt(e,t,n,r)}finally{vt=u,$t.transition=a}}function Vt(e,t,n,r){var u=vt,a=$t.transition;$t.transition=null;try{vt=4,Wt(e,t,n,r)}finally{vt=u,$t.transition=a}}function Wt(e,t,n,r){var u=Kt(e,t,n,r);if(null===u)$r(e,t,r,Gt,n),Tt(e,r);else if(function(e,t,n,r,u){switch(t){case"focusin":return kt=Ot(kt,e,t,n,r,u),!0;case"dragenter":return _t=Ot(_t,e,t,n,r,u),!0;case"mouseover":return St=Ot(St,e,t,n,r,u),!0;case"pointerover":var a=u.pointerId;return Bt.set(a,Ot(Bt.get(a)||null,e,t,n,r,u)),!0;case"gotpointercapture":return a=u.pointerId,Mt.set(a,Ot(Mt.get(a)||null,e,t,n,r,u)),!0}return!1}(u,e,t,n,r))r.stopPropagation();else if(Tt(e,r),4&t&&-1<Pt.indexOf(e)){for(;null!==u;){var a=mu(u);if(null!==a&&bt(a),null===(a=Kt(e,t,n,r))&&$r(e,t,r,Gt,n),a===u)break;u=a}null!==u&&r.stopPropagation()}else $r(e,t,r,null,n)}var Gt=null;function Kt(e,t,n,r){if(Gt=null,null!==(e=hu(e=Ce(r))))if(null===(t=$e(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Qt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ye()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var qt=null,Zt=null,Xt=null;function Yt(){if(Xt)return Xt;var e,t,n=Zt,r=n.length,u="value"in qt?qt.value:qt.textContent,a=u.length;for(e=0;e<r&&n[e]===u[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===u[a-t];t++);return Xt=u.slice(e,1<t?1-t:void 0)}function Jt(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function en(){return!0}function tn(){return!1}function nn(e){function t(t,n,r,u,a){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=u,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(u):u[o]);return this.isDefaultPrevented=(null!=u.defaultPrevented?u.defaultPrevented:!1===u.returnValue)?en:tn,this.isPropagationStopped=tn,this}return I(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=en)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=en)},persist:function(){},isPersistent:en}),t}var rn,un,an,on={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ln=nn(on),sn=I({},on,{view:0,detail:0}),cn=nn(sn),fn=I({},sn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:An,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==an&&(an&&"mousemove"===e.type?(rn=e.screenX-an.screenX,un=e.screenY-an.screenY):un=rn=0,an=e),rn)},movementY:function(e){return"movementY"in e?e.movementY:un}}),dn=nn(fn),pn=nn(I({},fn,{dataTransfer:0})),gn=nn(I({},sn,{relatedTarget:0})),hn=nn(I({},on,{animationName:0,elapsedTime:0,pseudoElement:0})),mn=I({},on,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Dn=nn(mn),vn=nn(I({},on,{data:0})),yn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},bn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function En(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function An(){return En}var Fn=I({},sn,{key:function(e){if(e.key){var t=yn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Jt(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?bn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:An,charCode:function(e){return"keypress"===e.type?Jt(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Jt(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),wn=nn(Fn),xn=nn(I({},fn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),kn=nn(I({},sn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:An})),_n=nn(I({},on,{propertyName:0,elapsedTime:0,pseudoElement:0})),Sn=I({},fn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Bn=nn(Sn),Mn=[9,13,27,32],Nn=c&&"CompositionEvent"in window,Pn=null;c&&"documentMode"in document&&(Pn=document.documentMode);var Tn=c&&"TextEvent"in window&&!Pn,On=c&&(!Nn||Pn&&8<Pn&&11>=Pn),Ln=String.fromCharCode(32),In=!1;function jn(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function zn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Rn=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Hn(e,t,n,r){xe(r),0<(t=Vr(t,"onChange")).length&&(n=new ln("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Vn=null,Wn=null;function Gn(e){Lr(e,0)}function Kn(e){if(K(Du(e)))return e}function Qn(e,t){if("change"===e)return t}var qn=!1;if(c){var Zn;if(c){var Xn="oninput"in document;if(!Xn){var Yn=document.createElement("div");Yn.setAttribute("oninput","return;"),Xn="function"==typeof Yn.oninput}Zn=Xn}else Zn=!1;qn=Zn&&(!document.documentMode||9<document.documentMode)}function Jn(){Vn&&(Vn.detachEvent("onpropertychange",er),Wn=Vn=null)}function er(e){if("value"===e.propertyName&&Kn(Wn)){var t=[];Hn(t,Wn,e,Ce(e)),Me(Gn,t)}}function tr(e,t,n){"focusin"===e?(Jn(),Wn=n,(Vn=t).attachEvent("onpropertychange",er)):"focusout"===e&&Jn()}function nr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(Wn)}function rr(e,t){if("click"===e)return Kn(t)}function ur(e,t){if("input"===e||"change"===e)return Kn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function or(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var u=n[r];if(!f.call(t,u)||!ar(e[u],t[u]))return!1}return!0}function lr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ir(e,t){var n,r=lr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=lr(r)}}function sr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?sr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function cr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function fr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function dr(e){var t=cr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&sr(n.ownerDocument.documentElement,n)){if(null!==r&&fr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var u=n.textContent.length,a=Math.min(r.start,u);r=void 0===r.end?a:Math.min(r.end,u),!e.extend&&a>r&&(u=r,r=a,a=u),u=ir(n,a);var o=ir(n,r);u&&o&&(1!==e.rangeCount||e.anchorNode!==u.node||e.anchorOffset!==u.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&((t=t.createRange()).setStart(u.node,u.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var pr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,hr=null,mr=null,Dr=!1;function vr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Dr||null==gr||gr!==Q(r)||(r="selectionStart"in(r=gr)&&fr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},mr&&or(mr,r)||(mr=r,0<(r=Vr(hr,"onSelect")).length&&(t=new ln("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function yr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var br={animationend:yr("Animation","AnimationEnd"),animationiteration:yr("Animation","AnimationIteration"),animationstart:yr("Animation","AnimationStart"),transitionend:yr("Transition","TransitionEnd")},Cr={},Er={};function Ar(e){if(Cr[e])return Cr[e];if(!br[e])return e;var t,n=br[e];for(t in n)if(n.hasOwnProperty(t)&&t in Er)return Cr[e]=n[t];return e}c&&(Er=document.createElement("div").style,"AnimationEvent"in window||(delete br.animationend.animation,delete br.animationiteration.animation,delete br.animationstart.animation),"TransitionEvent"in window||delete br.transitionend.transition);var Fr=Ar("animationend"),wr=Ar("animationiteration"),xr=Ar("animationstart"),kr=Ar("transitionend"),_r=new Map,Sr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Br(e,t){_r.set(e,t),i(t,[e])}for(var Mr=0;Mr<Sr.length;Mr++){var Nr=Sr[Mr];Br(Nr.toLowerCase(),"on"+(Nr[0].toUpperCase()+Nr.slice(1)))}Br(Fr,"onAnimationEnd"),Br(wr,"onAnimationIteration"),Br(xr,"onAnimationStart"),Br("dblclick","onDoubleClick"),Br("focusin","onFocus"),Br("focusout","onBlur"),Br(kr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),i("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),i("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),i("onBeforeInput",["compositionend","keypress","textInput","paste"]),i("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),i("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),i("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Pr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Tr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Pr));function Or(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,u,o,l,i,s){if(Ue.apply(this,arguments),Le){if(!Le)throw Error(a(198));var c=Ie;Le=!1,Ie=null,je||(je=!0,ze=c)}}(r,t,void 0,e),e.currentTarget=null}function Lr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],u=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var o=r.length-1;0<=o;o--){var l=r[o],i=l.instance,s=l.currentTarget;if(l=l.listener,i!==a&&u.isPropagationStopped())break e;Or(u,l,s),a=i}else for(o=0;o<r.length;o++){if(i=(l=r[o]).instance,s=l.currentTarget,l=l.listener,i!==a&&u.isPropagationStopped())break e;Or(u,l,s),a=i}}}if(je)throw e=ze,je=!1,ze=null,e}function Ir(e,t){var n=t[du];void 0===n&&(n=t[du]=new Set);var r=e+"__bubble";n.has(r)||(Ur(t,e,2,!1),n.add(r))}function jr(e,t,n){var r=0;t&&(r|=4),Ur(n,e,r,t)}var zr="_reactListening"+Math.random().toString(36).slice(2);function Rr(e){if(!e[zr]){e[zr]=!0,o.forEach((function(t){"selectionchange"!==t&&(Tr.has(t)||jr(t,!1,e),jr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[zr]||(t[zr]=!0,jr("selectionchange",!1,t))}}function Ur(e,t,n,r){switch(Qt(t)){case 1:var u=Ht;break;case 4:u=Vt;break;default:u=Wt}n=u.bind(null,t,n,e),u=void 0,!Pe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(u=!0),r?void 0!==u?e.addEventListener(t,n,{capture:!0,passive:u}):e.addEventListener(t,n,!0):void 0!==u?e.addEventListener(t,n,{passive:u}):e.addEventListener(t,n,!1)}function $r(e,t,n,r,u){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var l=r.stateNode.containerInfo;if(l===u||8===l.nodeType&&l.parentNode===u)break;if(4===o)for(o=r.return;null!==o;){var i=o.tag;if((3===i||4===i)&&((i=o.stateNode.containerInfo)===u||8===i.nodeType&&i.parentNode===u))return;o=o.return}for(;null!==l;){if(null===(o=hu(l)))return;if(5===(i=o.tag)||6===i){r=a=o;continue e}l=l.parentNode}}r=r.return}Me((function(){var r=a,u=Ce(n),o=[];e:{var l=_r.get(e);if(void 0!==l){var i=ln,s=e;switch(e){case"keypress":if(0===Jt(n))break e;case"keydown":case"keyup":i=wn;break;case"focusin":s="focus",i=gn;break;case"focusout":s="blur",i=gn;break;case"beforeblur":case"afterblur":i=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":i=dn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":i=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":i=kn;break;case Fr:case wr:case xr:i=hn;break;case kr:i=_n;break;case"scroll":i=cn;break;case"wheel":i=Bn;break;case"copy":case"cut":case"paste":i=Dn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":i=xn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,g=r;null!==g;){var h=(p=g).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==d&&null!=(h=Ne(g,d))&&c.push(Hr(g,h,p))),f)break;g=g.return}0<c.length&&(l=new i(l,s,null,n,u),o.push({event:l,listeners:c}))}}if(0==(7&t)){if(i="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===be||!(s=n.relatedTarget||n.fromElement)||!hu(s)&&!s[fu])&&(i||l)&&(l=u.window===u?u:(l=u.ownerDocument)?l.defaultView||l.parentWindow:window,i?(i=r,null!==(s=(s=n.relatedTarget||n.toElement)?hu(s):null)&&(s!==(f=$e(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(i=null,s=r),i!==s)){if(c=dn,h="onMouseLeave",d="onMouseEnter",g="mouse","pointerout"!==e&&"pointerover"!==e||(c=xn,h="onPointerLeave",d="onPointerEnter",g="pointer"),f=null==i?l:Du(i),p=null==s?l:Du(s),(l=new c(h,g+"leave",i,n,u)).target=f,l.relatedTarget=p,h=null,hu(u)===r&&((c=new c(d,g+"enter",s,n,u)).target=p,c.relatedTarget=f,h=c),f=h,i&&s)e:{for(d=s,g=0,p=c=i;p;p=Wr(p))g++;for(p=0,h=d;h;h=Wr(h))p++;for(;0<g-p;)c=Wr(c),g--;for(;0<p-g;)d=Wr(d),p--;for(;g--;){if(c===d||null!==d&&c===d.alternate)break e;c=Wr(c),d=Wr(d)}c=null}else c=null;null!==i&&Gr(o,l,i,c,!1),null!==s&&null!==f&&Gr(o,f,s,c,!0)}if("select"===(i=(l=r?Du(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===i&&"file"===l.type)var m=Qn;else if($n(l))if(qn)m=ur;else{m=nr;var D=tr}else(i=l.nodeName)&&"input"===i.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(m=rr);switch(m&&(m=m(e,r))?Hn(o,m,n,u):(D&&D(e,l,r),"focusout"===e&&(D=l._wrapperState)&&D.controlled&&"number"===l.type&&ee(l,"number",l.value)),D=r?Du(r):window,e){case"focusin":($n(D)||"true"===D.contentEditable)&&(gr=D,hr=r,mr=null);break;case"focusout":mr=hr=gr=null;break;case"mousedown":Dr=!0;break;case"contextmenu":case"mouseup":case"dragend":Dr=!1,vr(o,n,u);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":vr(o,n,u)}var v;if(Nn)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else Rn?jn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(On&&"ko"!==n.locale&&(Rn||"onCompositionStart"!==y?"onCompositionEnd"===y&&Rn&&(v=Yt()):(Zt="value"in(qt=u)?qt.value:qt.textContent,Rn=!0)),0<(D=Vr(r,y)).length&&(y=new vn(y,e,null,n,u),o.push({event:y,listeners:D}),(v||null!==(v=zn(n)))&&(y.data=v))),(v=Tn?function(e,t){switch(e){case"compositionend":return zn(t);case"keypress":return 32!==t.which?null:(In=!0,Ln);case"textInput":return(e=t.data)===Ln&&In?null:e;default:return null}}(e,n):function(e,t){if(Rn)return"compositionend"===e||!Nn&&jn(e,t)?(e=Yt(),Xt=Zt=qt=null,Rn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return On&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Vr(r,"onBeforeInput")).length&&(u=new vn("onBeforeInput","beforeinput",null,n,u),o.push({event:u,listeners:r}),u.data=v)}Lr(o,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Vr(e,t){for(var n=t+"Capture",r=[];null!==e;){var u=e,a=u.stateNode;5===u.tag&&null!==a&&(u=a,null!=(a=Ne(e,n))&&r.unshift(Hr(e,a,u)),null!=(a=Ne(e,t))&&r.push(Hr(e,a,u))),e=e.return}return r}function Wr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gr(e,t,n,r,u){for(var a=t._reactName,o=[];null!==n&&n!==r;){var l=n,i=l.alternate,s=l.stateNode;if(null!==i&&i===r)break;5===l.tag&&null!==s&&(l=s,u?null!=(i=Ne(n,a))&&o.unshift(Hr(n,i,l)):u||null!=(i=Ne(n,a))&&o.push(Hr(n,i,l))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Kr=/\r\n?/g,Qr=/\u0000|\uFFFD/g;function qr(e){return("string"==typeof e?e:""+e).replace(Kr,"\n").replace(Qr,"")}function Zr(e,t,n){if(t=qr(t),qr(e)!==t&&n)throw Error(a(425))}function Xr(){}var Yr=null;function Jr(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var eu="function"==typeof setTimeout?setTimeout:void 0,tu="function"==typeof clearTimeout?clearTimeout:void 0,nu="function"==typeof Promise?Promise:void 0,ru="function"==typeof queueMicrotask?queueMicrotask:void 0!==nu?function(e){return nu.resolve(null).then(e).catch(uu)}:eu;function uu(e){setTimeout((function(){throw e}))}function au(e,t){var n=t,r=0;do{var u=n.nextSibling;if(e.removeChild(n),u&&8===u.nodeType)if("/$"===(n=u.data)){if(0===r)return e.removeChild(u),void Ut(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=u}while(n);Ut(t)}function ou(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function lu(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var iu=Math.random().toString(36).slice(2),su="__reactFiber$"+iu,cu="__reactProps$"+iu,fu="__reactContainer$"+iu,du="__reactEvents$"+iu,pu="__reactListeners$"+iu,gu="__reactHandles$"+iu;function hu(e){var t=e[su];if(t)return t;for(var n=e.parentNode;n;){if(t=n[fu]||n[su]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=lu(e);null!==e;){if(n=e[su])return n;e=lu(e)}return t}n=(e=n).parentNode}return null}function mu(e){return!(e=e[su]||e[fu])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Du(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function vu(e){return e[cu]||null}var yu=[],bu=-1;function Cu(e){return{current:e}}function Eu(e){0>bu||(e.current=yu[bu],yu[bu]=null,bu--)}function Au(e,t){bu++,yu[bu]=e.current,e.current=t}var Fu={},wu=Cu(Fu),xu=Cu(!1),ku=Fu;function _u(e,t){var n=e.type.contextTypes;if(!n)return Fu;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var u,a={};for(u in n)a[u]=t[u];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Su(e){return null!=e.childContextTypes}function Bu(){Eu(xu),Eu(wu)}function Mu(e,t,n){if(wu.current!==Fu)throw Error(a(168));Au(wu,t),Au(xu,n)}function Nu(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var u in r=r.getChildContext())if(!(u in t))throw Error(a(108,H(e)||"Unknown",u));return I({},n,r)}function Pu(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Fu,ku=wu.current,Au(wu,e),Au(xu,xu.current),!0}function Tu(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Nu(e,t,ku),r.__reactInternalMemoizedMergedChildContext=e,Eu(xu),Eu(wu),Au(wu,e)):Eu(xu),Au(xu,n)}var Ou=null,Lu=!1,Iu=!1;function ju(e){null===Ou?Ou=[e]:Ou.push(e)}function zu(){if(!Iu&&null!==Ou){Iu=!0;var e=0,t=vt;try{var n=Ou;for(vt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Ou=null,Lu=!1}catch(t){throw null!==Ou&&(Ou=Ou.slice(e+1)),Ke(Je,zu),t}finally{vt=t,Iu=!1}}return null}var Ru=b.ReactCurrentBatchConfig;function Uu(e,t){if(e&&e.defaultProps){for(var n in t=I({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var $u=Cu(null),Hu=null,Vu=null,Wu=null;function Gu(){Wu=Vu=Hu=null}function Ku(e){var t=$u.current;Eu($u),e._currentValue=t}function Qu(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function qu(e,t){Hu=e,Wu=Vu=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Dl=!0),e.firstContext=null)}function Zu(e){var t=e._currentValue;if(Wu!==e)if(e={context:e,memoizedValue:t,next:null},null===Vu){if(null===Hu)throw Error(a(308));Vu=e,Hu.dependencies={lanes:0,firstContext:e}}else Vu=Vu.next=e;return t}var Xu=null,Yu=!1;function Ju(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function ea(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ta(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function na(e,t){var n=e.updateQueue;null!==n&&(n=n.shared,null!==Di&&0!=(1&e.mode)&&0==(2&mi)?(null===(e=n.interleaved)?(t.next=t,null===Xu?Xu=[n]:Xu.push(n)):(t.next=e.next,e.next=t),n.interleaved=t):(null===(e=n.pending)?t.next=t:(t.next=e.next,e.next=t),n.pending=t))}function ra(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Dt(e,n)}}function ua(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var u=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?u=a=o:a=a.next=o,n=n.next}while(null!==n);null===a?u=a=t:a=a.next=t}else u=a=t;return n={baseState:r.baseState,firstBaseUpdate:u,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function aa(e,t,n,r){var u=e.updateQueue;Yu=!1;var a=u.firstBaseUpdate,o=u.lastBaseUpdate,l=u.shared.pending;if(null!==l){u.shared.pending=null;var i=l,s=i.next;i.next=null,null===o?a=s:o.next=s,o=i;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==o&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=i)}if(null!==a){var f=u.baseState;for(o=0,c=s=i=null,l=a;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var g=e,h=l;switch(d=t,p=n,h.tag){case 1:if("function"==typeof(g=h.payload)){f=g.call(p,f,d);break e}f=g;break e;case 3:g.flags=-65537&g.flags|128;case 0:if(null==(d="function"==typeof(g=h.payload)?g.call(p,f,d):g))break e;f=I({},f,d);break e;case 2:Yu=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=u.effects)?u.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,i=f):c=c.next=p,o|=d;if(null===(l=l.next)){if(null===(l=u.shared.pending))break;l=(d=l).next,d.next=null,u.lastBaseUpdate=d,u.shared.pending=null}}if(null===c&&(i=f),u.baseState=i,u.firstBaseUpdate=s,u.lastBaseUpdate=c,null!==(t=u.shared.interleaved)){u=t;do{o|=u.lane,u=u.next}while(u!==t)}else null===a&&(u.shared.lanes=0);Fi|=o,e.lanes=o,e.memoizedState=f}}function oa(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],u=r.callback;if(null!==u){if(r.callback=null,r=n,"function"!=typeof u)throw Error(a(191,u));u.call(r)}}}var la=(new r.Component).refs;function ia(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:I({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var sa={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=Ui(),u=$i(e),a=ta(r,u);a.payload=t,null!=n&&(a.callback=n),na(e,a),null!==(t=Hi(e,u,r))&&ra(t,e,u)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=Ui(),u=$i(e),a=ta(r,u);a.tag=1,a.payload=t,null!=n&&(a.callback=n),na(e,a),null!==(t=Hi(e,u,r))&&ra(t,e,u)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=Ui(),r=$i(e),u=ta(n,r);u.tag=2,null!=t&&(u.callback=t),na(e,u),null!==(t=Hi(e,r,n))&&ra(t,e,r)}};function ca(e,t,n,r,u,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!(t.prototype&&t.prototype.isPureReactComponent&&or(n,r)&&or(u,a))}function fa(e,t,n){var r=!1,u=Fu,a=t.contextType;return"object"==typeof a&&null!==a?a=Zu(a):(u=Su(t)?ku:wu.current,a=(r=null!=(r=t.contextTypes))?_u(e,u):Fu),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=sa,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=u,e.__reactInternalMemoizedMaskedChildContext=a),t}function da(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&sa.enqueueReplaceState(t,t.state,null)}function pa(e,t,n,r){var u=e.stateNode;u.props=n,u.state=e.memoizedState,u.refs=la,Ju(e);var a=t.contextType;"object"==typeof a&&null!==a?u.context=Zu(a):(a=Su(t)?ku:wu.current,u.context=_u(e,a)),u.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ia(e,t,a,n),u.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||(t=u.state,"function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount(),t!==u.state&&sa.enqueueReplaceState(u,u.state,null),aa(e,n,u,r),u.state=e.memoizedState),"function"==typeof u.componentDidMount&&(e.flags|=4194308)}var ga=[],ha=0,ma=null,Da=0,va=[],ya=0,ba=null,Ca=1,Ea="";function Aa(e,t){ga[ha++]=Da,ga[ha++]=ma,ma=e,Da=t}function Fa(e,t,n){va[ya++]=Ca,va[ya++]=Ea,va[ya++]=ba,ba=e;var r=Ca;e=Ea;var u=32-ot(r)-1;r&=~(1<<u),n+=1;var a=32-ot(t)+u;if(30<a){var o=u-u%5;a=(r&(1<<o)-1).toString(32),r>>=o,u-=o,Ca=1<<32-ot(t)+u|n<<u|r,Ea=a+e}else Ca=1<<a|n<<u|r,Ea=e}function wa(e){null!==e.return&&(Aa(e,1),Fa(e,1,0))}function xa(e){for(;e===ma;)ma=ga[--ha],ga[ha]=null,Da=ga[--ha],ga[ha]=null;for(;e===ba;)ba=va[--ya],va[ya]=null,Ea=va[--ya],va[ya]=null,Ca=va[--ya],va[ya]=null}var ka=null,_a=null,Sa=!1,Ba=null;function Ma(e,t){var n=ys(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function Na(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ka=e,_a=ou(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ka=e,_a=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==ba?{id:Ca,overflow:Ea}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=ys(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ka=e,_a=null,!0);default:return!1}}function Pa(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function Ta(e){if(Sa){var t=_a;if(t){var n=t;if(!Na(e,t)){if(Pa(e))throw Error(a(418));t=ou(n.nextSibling);var r=ka;t&&Na(e,t)?Ma(r,n):(e.flags=-4097&e.flags|2,Sa=!1,ka=e)}}else{if(Pa(e))throw Error(a(418));e.flags=-4097&e.flags|2,Sa=!1,ka=e}}}function Oa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ka=e}function La(e){if(e!==ka)return!1;if(!Sa)return Oa(e),Sa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!Jr(e.type,e.memoizedProps)),t&&(t=_a)){if(Pa(e)){for(e=_a;e;)e=ou(e.nextSibling);throw Error(a(418))}for(;t;)Ma(e,t),t=ou(t.nextSibling)}if(Oa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){_a=ou(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}_a=null}}else _a=ka?ou(e.stateNode.nextSibling):null;return!0}function Ia(){_a=ka=null,Sa=!1}function ja(e){null===Ba?Ba=[e]:Ba.push(e)}function za(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var u=r,o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=u.refs;t===la&&(t=u.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ra(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Ua(e){return(0,e._init)(e._payload)}function $a(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function u(e,t){return(e=Cs(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function i(e,t,n,r){return null===t||6!==t.tag?((t=ws(n,e.mode,r)).return=e,t):((t=u(t,n)).return=e,t)}function s(e,t,n,r){var a=n.type;return a===A?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===N&&Ua(a)===t.type)?((r=u(t,n.props)).ref=za(e,t,n),r.return=e,r):((r=Es(n.type,n.key,n.props,null,e.mode,r)).ref=za(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=xs(n,e.mode,r)).return=e,t):((t=u(t,n.children||[])).return=e,t)}function f(e,t,n,r,a){return null===t||7!==t.tag?((t=As(n,e.mode,r,a)).return=e,t):((t=u(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=ws(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case C:return(n=Es(t.type,t.key,t.props,null,e.mode,n)).ref=za(e,null,t),n.return=e,n;case E:return(t=xs(t,e.mode,n)).return=e,t;case N:return d(e,(0,t._init)(t._payload),n)}if(te(t)||O(t))return(t=As(t,e.mode,n,null)).return=e,t;Ra(e,t)}return null}function p(e,t,n,r){var u=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==u?null:i(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case C:return n.key===u?s(e,t,n,r):null;case E:return n.key===u?c(e,t,n,r):null;case N:return p(e,t,(u=n._init)(n._payload),r)}if(te(n)||O(n))return null!==u?null:f(e,t,n,r,null);Ra(e,n)}return null}function g(e,t,n,r,u){if("string"==typeof r&&""!==r||"number"==typeof r)return i(t,e=e.get(n)||null,""+r,u);if("object"==typeof r&&null!==r){switch(r.$$typeof){case C:return s(t,e=e.get(null===r.key?n:r.key)||null,r,u);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,u);case N:return g(e,t,n,(0,r._init)(r._payload),u)}if(te(r)||O(r))return f(t,e=e.get(n)||null,r,u,null);Ra(t,r)}return null}function h(u,a,l,i){for(var s=null,c=null,f=a,h=a=0,m=null;null!==f&&h<l.length;h++){f.index>h?(m=f,f=null):m=f.sibling;var D=p(u,f,l[h],i);if(null===D){null===f&&(f=m);break}e&&f&&null===D.alternate&&t(u,f),a=o(D,a,h),null===c?s=D:c.sibling=D,c=D,f=m}if(h===l.length)return n(u,f),Sa&&Aa(u,h),s;if(null===f){for(;h<l.length;h++)null!==(f=d(u,l[h],i))&&(a=o(f,a,h),null===c?s=f:c.sibling=f,c=f);return Sa&&Aa(u,h),s}for(f=r(u,f);h<l.length;h++)null!==(m=g(f,u,h,l[h],i))&&(e&&null!==m.alternate&&f.delete(null===m.key?h:m.key),a=o(m,a,h),null===c?s=m:c.sibling=m,c=m);return e&&f.forEach((function(e){return t(u,e)})),Sa&&Aa(u,h),s}function m(u,l,i,s){var c=O(i);if("function"!=typeof c)throw Error(a(150));if(null==(i=c.call(i)))throw Error(a(151));for(var f=c=null,h=l,m=l=0,D=null,v=i.next();null!==h&&!v.done;m++,v=i.next()){h.index>m?(D=h,h=null):D=h.sibling;var y=p(u,h,v.value,s);if(null===y){null===h&&(h=D);break}e&&h&&null===y.alternate&&t(u,h),l=o(y,l,m),null===f?c=y:f.sibling=y,f=y,h=D}if(v.done)return n(u,h),Sa&&Aa(u,m),c;if(null===h){for(;!v.done;m++,v=i.next())null!==(v=d(u,v.value,s))&&(l=o(v,l,m),null===f?c=v:f.sibling=v,f=v);return Sa&&Aa(u,m),c}for(h=r(u,h);!v.done;m++,v=i.next())null!==(v=g(h,u,m,v.value,s))&&(e&&null!==v.alternate&&h.delete(null===v.key?m:v.key),l=o(v,l,m),null===f?c=v:f.sibling=v,f=v);return e&&h.forEach((function(e){return t(u,e)})),Sa&&Aa(u,m),c}return function e(r,a,o,i){if("object"==typeof o&&null!==o&&o.type===A&&null===o.key&&(o=o.props.children),"object"==typeof o&&null!==o){switch(o.$$typeof){case C:e:{for(var s=o.key,c=a;null!==c;){if(c.key===s){if((s=o.type)===A){if(7===c.tag){n(r,c.sibling),(a=u(c,o.props.children)).return=r,r=a;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===N&&Ua(s)===c.type){n(r,c.sibling),(a=u(c,o.props)).ref=za(r,c,o),a.return=r,r=a;break e}n(r,c);break}t(r,c),c=c.sibling}o.type===A?((a=As(o.props.children,r.mode,i,o.key)).return=r,r=a):((i=Es(o.type,o.key,o.props,null,r.mode,i)).ref=za(r,a,o),i.return=r,r=i)}return l(r);case E:e:{for(c=o.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===o.containerInfo&&a.stateNode.implementation===o.implementation){n(r,a.sibling),(a=u(a,o.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=xs(o,r.mode,i)).return=r,r=a}return l(r);case N:return e(r,a,(c=o._init)(o._payload),i)}if(te(o))return h(r,a,o,i);if(O(o))return m(r,a,o,i);Ra(r,o)}return"string"==typeof o&&""!==o||"number"==typeof o?(o=""+o,null!==a&&6===a.tag?(n(r,a.sibling),(a=u(a,o)).return=r,r=a):(n(r,a),(a=ws(o,r.mode,i)).return=r,r=a),l(r)):n(r,a)}}var Ha=$a(!0),Va=$a(!1),Wa={},Ga=Cu(Wa),Ka=Cu(Wa),Qa=Cu(Wa);function qa(e){if(e===Wa)throw Error(a(174));return e}function Za(e,t){switch(Au(Qa,t),Au(Ka,e),Au(Ga,Wa),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ie(null,"");break;default:t=ie(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Eu(Ga),Au(Ga,t)}function Xa(){Eu(Ga),Eu(Ka),Eu(Qa)}function Ya(e){qa(Qa.current);var t=qa(Ga.current),n=ie(t,e.type);t!==n&&(Au(Ka,e),Au(Ga,n))}function Ja(e){Ka.current===e&&(Eu(Ga),Eu(Ka))}var eo=Cu(0);function to(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var no=[];function ro(){for(var e=0;e<no.length;e++)no[e]._workInProgressVersionPrimary=null;no.length=0}var uo=b.ReactCurrentDispatcher,ao=b.ReactCurrentBatchConfig,oo=0,lo=null,io=null,so=null,co=!1,fo=!1,po=0,go=0;function ho(){throw Error(a(321))}function mo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function Do(e,t,n,r,u,o){if(oo=o,lo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,uo.current=null===e||null===e.memoizedState?Jo:el,e=n(r,u),fo){o=0;do{if(fo=!1,po=0,25<=o)throw Error(a(301));o+=1,so=io=null,t.updateQueue=null,uo.current=tl,e=n(r,u)}while(fo)}if(uo.current=Yo,t=null!==io&&null!==io.next,oo=0,so=io=lo=null,co=!1,t)throw Error(a(300));return e}function vo(){var e=0!==po;return po=0,e}function yo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===so?lo.memoizedState=so=e:so=so.next=e,so}function bo(){if(null===io){var e=lo.alternate;e=null!==e?e.memoizedState:null}else e=io.next;var t=null===so?lo.memoizedState:so.next;if(null!==t)so=t,io=e;else{if(null===e)throw Error(a(310));e={memoizedState:(io=e).memoizedState,baseState:io.baseState,baseQueue:io.baseQueue,queue:io.queue,next:null},null===so?lo.memoizedState=so=e:so=so.next=e}return so}function Co(e,t){return"function"==typeof t?t(e):t}function Eo(e){var t=bo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=io,u=r.baseQueue,o=n.pending;if(null!==o){if(null!==u){var l=u.next;u.next=o.next,o.next=l}r.baseQueue=u=o,n.pending=null}if(null!==u){o=u.next,r=r.baseState;var i=l=null,s=null,c=o;do{var f=c.lane;if((oo&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(i=s=d,l=r):s=s.next=d,lo.lanes|=f,Fi|=f}c=c.next}while(null!==c&&c!==o);null===s?l=r:s.next=i,ar(r,t.memoizedState)||(Dl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){u=e;do{o=u.lane,lo.lanes|=o,Fi|=o,u=u.next}while(u!==e)}else null===u&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ao(e){var t=bo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,u=n.pending,o=t.memoizedState;if(null!==u){n.pending=null;var l=u=u.next;do{o=e(o,l.action),l=l.next}while(l!==u);ar(o,t.memoizedState)||(Dl=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function Fo(){}function wo(e,t){var n=lo,r=bo(),u=t(),o=!ar(r.memoizedState,u);if(o&&(r.memoizedState=u,Dl=!0),r=r.queue,Lo(_o.bind(null,n,r,e),[e]),r.getSnapshot!==t||o||null!==so&&1&so.memoizedState.tag){if(n.flags|=2048,Mo(9,ko.bind(null,n,r,u,t),void 0,null),null===Di)throw Error(a(349));0!=(30&oo)||xo(n,t,u)}return u}function xo(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=lo.updateQueue)?(t={lastEffect:null,stores:null},lo.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function ko(e,t,n,r){t.value=n,t.getSnapshot=r,So(t)&&Hi(e,1,-1)}function _o(e,t,n){return n((function(){So(t)&&Hi(e,1,-1)}))}function So(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ar(e,n)}catch(e){return!0}}function Bo(e){var t=yo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Co,lastRenderedState:e},t.queue=e,e=e.dispatch=Ko.bind(null,lo,e),[t.memoizedState,e]}function Mo(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=lo.updateQueue)?(t={lastEffect:null,stores:null},lo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function No(){return bo().memoizedState}function Po(e,t,n,r){var u=yo();lo.flags|=e,u.memoizedState=Mo(1|t,n,void 0,void 0===r?null:r)}function To(e,t,n,r){var u=bo();r=void 0===r?null:r;var a=void 0;if(null!==io){var o=io.memoizedState;if(a=o.destroy,null!==r&&mo(r,o.deps))return void(u.memoizedState=Mo(t,n,a,r))}lo.flags|=e,u.memoizedState=Mo(1|t,n,a,r)}function Oo(e,t){return Po(8390656,8,e,t)}function Lo(e,t){return To(2048,8,e,t)}function Io(e,t){return To(4,2,e,t)}function jo(e,t){return To(4,4,e,t)}function zo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ro(e,t,n){return n=null!=n?n.concat([e]):null,To(4,4,zo.bind(null,t,e),n)}function Uo(){}function $o(e,t){var n=bo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ho(e,t){var n=bo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&mo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Vo(e,t){var n=vt;vt=0!==n&&4>n?n:4,e(!0);var r=ao.transition;ao.transition={};try{e(!1),t()}finally{vt=n,ao.transition=r}}function Wo(){return bo().memoizedState}function Go(e,t,n){var r=$i(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Qo(e)?qo(t,n):(Zo(e,t,n),null!==(e=Hi(e,r,n=Ui()))&&Xo(e,t,r))}function Ko(e,t,n){var r=$i(e),u={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Qo(e))qo(t,u);else{Zo(e,t,u);var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var o=t.lastRenderedState,l=a(o,n);if(u.hasEagerState=!0,u.eagerState=l,ar(l,o))return}catch(e){}null!==(e=Hi(e,r,n=Ui()))&&Xo(e,t,r)}}function Qo(e){var t=e.alternate;return e===lo||null!==t&&t===lo}function qo(e,t){fo=co=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Zo(e,t,n){null!==Di&&0!=(1&e.mode)&&0==(2&mi)?(null===(e=t.interleaved)?(n.next=n,null===Xu?Xu=[t]:Xu.push(t)):(n.next=e.next,e.next=n),t.interleaved=n):(null===(e=t.pending)?n.next=n:(n.next=e.next,e.next=n),t.pending=n)}function Xo(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,Dt(e,n)}}var Yo={readContext:Zu,useCallback:ho,useContext:ho,useEffect:ho,useImperativeHandle:ho,useInsertionEffect:ho,useLayoutEffect:ho,useMemo:ho,useReducer:ho,useRef:ho,useState:ho,useDebugValue:ho,useDeferredValue:ho,useTransition:ho,useMutableSource:ho,useSyncExternalStore:ho,useId:ho,unstable_isNewReconciler:!1},Jo={readContext:Zu,useCallback:function(e,t){return yo().memoizedState=[e,void 0===t?null:t],e},useContext:Zu,useEffect:Oo,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Po(4194308,4,zo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Po(4194308,4,e,t)},useInsertionEffect:function(e,t){return Po(4,2,e,t)},useMemo:function(e,t){var n=yo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=yo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Go.bind(null,lo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},yo().memoizedState=e},useState:Bo,useDebugValue:Uo,useDeferredValue:function(e){var t=Bo(e),n=t[0],r=t[1];return Oo((function(){var t=ao.transition;ao.transition={};try{r(e)}finally{ao.transition=t}}),[e]),n},useTransition:function(){var e=Bo(!1),t=e[0];return e=Vo.bind(null,e[1]),yo().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=lo,u=yo();if(Sa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Di)throw Error(a(349));0!=(30&oo)||xo(r,t,n)}u.memoizedState=n;var o={value:n,getSnapshot:t};return u.queue=o,Oo(_o.bind(null,r,o,e),[e]),r.flags|=2048,Mo(9,ko.bind(null,r,o,n,t),void 0,null),n},useId:function(){var e=yo(),t=Di.identifierPrefix;if(Sa){var n=Ea;t=":"+t+"R"+(n=(Ca&~(1<<32-ot(Ca)-1)).toString(32)+n),0<(n=po++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=go++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},el={readContext:Zu,useCallback:$o,useContext:Zu,useEffect:Lo,useImperativeHandle:Ro,useInsertionEffect:Io,useLayoutEffect:jo,useMemo:Ho,useReducer:Eo,useRef:No,useState:function(){return Eo(Co)},useDebugValue:Uo,useDeferredValue:function(e){var t=Eo(Co),n=t[0],r=t[1];return Lo((function(){var t=ao.transition;ao.transition={};try{r(e)}finally{ao.transition=t}}),[e]),n},useTransition:function(){return[Eo(Co)[0],bo().memoizedState]},useMutableSource:Fo,useSyncExternalStore:wo,useId:Wo,unstable_isNewReconciler:!1},tl={readContext:Zu,useCallback:$o,useContext:Zu,useEffect:Lo,useImperativeHandle:Ro,useInsertionEffect:Io,useLayoutEffect:jo,useMemo:Ho,useReducer:Ao,useRef:No,useState:function(){return Ao(Co)},useDebugValue:Uo,useDeferredValue:function(e){var t=Ao(Co),n=t[0],r=t[1];return Lo((function(){var t=ao.transition;ao.transition={};try{r(e)}finally{ao.transition=t}}),[e]),n},useTransition:function(){return[Ao(Co)[0],bo().memoizedState]},useMutableSource:Fo,useSyncExternalStore:wo,useId:Wo,unstable_isNewReconciler:!1};function nl(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var u=n}catch(e){u="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:u}}function rl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var ul,al,ol,ll="function"==typeof WeakMap?WeakMap:Map;function il(e,t,n){(n=ta(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Mi||(Mi=!0,Ni=r),rl(0,t)},n}function sl(e,t,n){(n=ta(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var u=t.value;n.payload=function(){return r(u)},n.callback=function(){rl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){rl(0,t),"function"!=typeof r&&(null===Pi?Pi=new Set([this]):Pi.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function cl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new ll;var u=new Set;r.set(t,u)}else void 0===(u=r.get(t))&&(u=new Set,r.set(t,u));u.has(n)||(u.add(n),e=ps.bind(null,e,t,n),t.then(e,e))}function fl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function dl(e,t,n,r,u){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=ta(-1,1)).tag=2,na(n,t))),n.lanes|=1),e):(e.flags|=65536,e.lanes=u,e)}function pl(e,t){if(!Sa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function gl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var u=e.child;null!==u;)n|=u.lanes|u.childLanes,r|=14680064&u.subtreeFlags,r|=14680064&u.flags,u.return=e,u=u.sibling;else for(u=e.child;null!==u;)n|=u.lanes|u.childLanes,r|=u.subtreeFlags,r|=u.flags,u.return=e,u=u.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function hl(e,t,n){var r=t.pendingProps;switch(xa(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return gl(t),null;case 1:case 17:return Su(t.type)&&Bu(),gl(t),null;case 3:return r=t.stateNode,Xa(),Eu(xu),Eu(wu),ro(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(La(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==Ba&&(Qi(Ba),Ba=null))),gl(t),null;case 5:Ja(t);var u=qa(Qa.current);if(n=t.type,null!==e&&null!=t.stateNode)al(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return gl(t),null}if(e=qa(Ga.current),La(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[su]=t,r[cu]=o,e=0!=(1&t.mode),n){case"dialog":Ir("cancel",r),Ir("close",r);break;case"iframe":case"object":case"embed":Ir("load",r);break;case"video":case"audio":for(u=0;u<Pr.length;u++)Ir(Pr[u],r);break;case"source":Ir("error",r);break;case"img":case"image":case"link":Ir("error",r),Ir("load",r);break;case"details":Ir("toggle",r);break;case"input":Z(r,o),Ir("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},Ir("invalid",r);break;case"textarea":ue(r,o),Ir("invalid",r)}for(var i in ve(n,o),u=null,o)if(o.hasOwnProperty(i)){var s=o[i];"children"===i?"string"==typeof s?r.textContent!==s&&(Zr(r.textContent,s,e),u=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(Zr(r.textContent,s,e),u=["children",""+s]):l.hasOwnProperty(i)&&null!=s&&"onScroll"===i&&Ir("scroll",r)}switch(n){case"input":G(r),J(r,o,!0);break;case"textarea":G(r),oe(r);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(r.onclick=Xr)}r=u,t.updateQueue=r,null!==r&&(t.flags|=4)}else{i=9===u.nodeType?u:u.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=i.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=i.createElement(n,{is:r.is}):(e=i.createElement(n),"select"===n&&(i=e,r.multiple?i.multiple=!0:r.size&&(i.size=r.size))):e=i.createElementNS(e,n),e[su]=t,e[cu]=r,ul(e,t),t.stateNode=e;e:{switch(i=ye(n,r),n){case"dialog":Ir("cancel",e),Ir("close",e),u=r;break;case"iframe":case"object":case"embed":Ir("load",e),u=r;break;case"video":case"audio":for(u=0;u<Pr.length;u++)Ir(Pr[u],e);u=r;break;case"source":Ir("error",e),u=r;break;case"img":case"image":case"link":Ir("error",e),Ir("load",e),u=r;break;case"details":Ir("toggle",e),u=r;break;case"input":Z(e,r),u=q(e,r),Ir("invalid",e);break;case"option":default:u=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},u=I({},r,{value:void 0}),Ir("invalid",e);break;case"textarea":ue(e,r),u=re(e,r),Ir("invalid",e)}for(o in ve(n,u),s=u)if(s.hasOwnProperty(o)){var c=s[o];"style"===o?me(e,c):"dangerouslySetInnerHTML"===o?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===o?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(l.hasOwnProperty(o)?null!=c&&"onScroll"===o&&Ir("scroll",e):null!=c&&y(e,o,c,i))}switch(n){case"input":G(e),J(e,r,!1);break;case"textarea":G(e),oe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(o=r.value)?ne(e,!!r.multiple,o,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof u.onClick&&(e.onclick=Xr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return gl(t),null;case 6:if(e&&null!=t.stateNode)ol(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=qa(Qa.current),qa(Ga.current),La(t)){if(r=t.stateNode,n=t.memoizedProps,r[su]=t,(o=r.nodeValue!==n)&&null!==(e=ka))switch(i=0!=(1&e.mode),e.tag){case 3:Zr(r.nodeValue,n,i);break;case 5:!0!==e.memoizedProps[void 0]&&Zr(r.nodeValue,n,i)}o&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[su]=t,t.stateNode=r}return gl(t),null;case 13:if(Eu(eo),r=t.memoizedState,Sa&&null!==_a&&0!=(1&t.mode)&&0==(128&t.flags)){for(r=_a;r;)r=ou(r.nextSibling);return Ia(),t.flags|=98560,t}if(null!==r&&null!==r.dehydrated){if(r=La(t),null===e){if(!r)throw Error(a(318));if(!(r=null!==(r=t.memoizedState)?r.dehydrated:null))throw Error(a(317));r[su]=t}else Ia(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;return gl(t),null}return null!==Ba&&(Qi(Ba),Ba=null),0!=(128&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?La(t):n=null!==e.memoizedState,r&&!n&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&eo.current)?0===Ei&&(Ei=3):rs())),null!==t.updateQueue&&(t.flags|=4),gl(t),null);case 4:return Xa(),null===e&&Rr(t.stateNode.containerInfo),gl(t),null;case 10:return Ku(t.type._context),gl(t),null;case 19:if(Eu(eo),null===(o=t.memoizedState))return gl(t),null;if(r=0!=(128&t.flags),null===(i=o.rendering))if(r)pl(o,!1);else{if(0!==Ei||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(i=to(e))){for(t.flags|=128,pl(o,!1),null!==(r=i.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(o=n).flags&=14680066,null===(i=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=i.childLanes,o.lanes=i.lanes,o.child=i.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=i.memoizedProps,o.memoizedState=i.memoizedState,o.updateQueue=i.updateQueue,o.type=i.type,e=i.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Au(eo,1&eo.current|2),t.child}e=e.sibling}null!==o.tail&&Xe()>Bi&&(t.flags|=128,r=!0,pl(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=to(i))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),pl(o,!0),null===o.tail&&"hidden"===o.tailMode&&!i.alternate&&!Sa)return gl(t),null}else 2*Xe()-o.renderingStartTime>Bi&&1073741824!==n&&(t.flags|=128,r=!0,pl(o,!1),t.lanes=4194304);o.isBackwards?(i.sibling=t.child,t.child=i):(null!==(n=o.last)?n.sibling=i:t.child=i,o.last=i)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=Xe(),t.sibling=null,n=eo.current,Au(eo,r?1&n|2:1&n),t):(gl(t),null);case 22:case 23:return Ji(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&bi)&&(gl(t),6&t.subtreeFlags&&(t.flags|=8192)):gl(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}ul=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},al=function(e,t,n,r){var u=e.memoizedProps;if(u!==r){e=t.stateNode,qa(Ga.current);var a,o=null;switch(n){case"input":u=q(e,u),r=q(e,r),o=[];break;case"select":u=I({},u,{value:void 0}),r=I({},r,{value:void 0}),o=[];break;case"textarea":u=re(e,u),r=re(e,r),o=[];break;default:"function"!=typeof u.onClick&&"function"==typeof r.onClick&&(e.onclick=Xr)}for(c in ve(n,r),n=null,u)if(!r.hasOwnProperty(c)&&u.hasOwnProperty(c)&&null!=u[c])if("style"===c){var i=u[c];for(a in i)i.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?o||(o=[]):(o=o||[]).push(c,null));for(c in r){var s=r[c];if(i=null!=u?u[c]:void 0,r.hasOwnProperty(c)&&s!==i&&(null!=s||null!=i))if("style"===c)if(i){for(a in i)!i.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in s)s.hasOwnProperty(a)&&i[a]!==s[a]&&(n||(n={}),n[a]=s[a])}else n||(o||(o=[]),o.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,i=i?i.__html:void 0,null!=s&&i!==s&&(o=o||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(o=o||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Ir("scroll",e),o||i===s||(o=[])):(o=o||[]).push(c,s))}n&&(o=o||[]).push("style",n);var c=o;(t.updateQueue=c)&&(t.flags|=4)}},ol=function(e,t,n,r){n!==r&&(t.flags|=4)};var ml=b.ReactCurrentOwner,Dl=!1;function vl(e,t,n,r){t.child=null===e?Va(t,null,n,r):Ha(t,e.child,n,r)}function yl(e,t,n,r,u){n=n.render;var a=t.ref;return qu(t,u),r=Do(e,t,n,r,a,u),n=vo(),null===e||Dl?(Sa&&n&&wa(t),t.flags|=1,vl(e,t,r,u),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~u,zl(e,t,u))}function bl(e,t,n,r,u){if(null===e){var a=n.type;return"function"!=typeof a||bs(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Es(n.type,null,r,t,t.mode,u)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Cl(e,t,a,r,u))}if(a=e.child,0==(e.lanes&u)){var o=a.memoizedProps;if((n=null!==(n=n.compare)?n:or)(o,r)&&e.ref===t.ref)return zl(e,t,u)}return t.flags|=1,(e=Cs(a,r)).ref=t.ref,e.return=t,t.child=e}function Cl(e,t,n,r,u){if(null!==e&&or(e.memoizedProps,r)&&e.ref===t.ref){if(Dl=!1,0==(e.lanes&u))return t.lanes=e.lanes,zl(e,t,u);0!=(131072&e.flags)&&(Dl=!0)}return Fl(e,t,n,r,u)}function El(e,t,n){var r=t.pendingProps,u=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null},Au(Ci,bi),bi|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null},t.updateQueue=null,Au(Ci,bi),bi|=e,null;t.memoizedState={baseLanes:0,cachePool:null},r=null!==a?a.baseLanes:n,Au(Ci,bi),bi|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Au(Ci,bi),bi|=r;return vl(e,t,u,n),t.child}function Al(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Fl(e,t,n,r,u){var a=Su(n)?ku:wu.current;return a=_u(t,a),qu(t,u),n=Do(e,t,n,r,a,u),r=vo(),null===e||Dl?(Sa&&r&&wa(t),t.flags|=1,vl(e,t,n,u),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~u,zl(e,t,u))}function wl(e,t,n,r,u){if(Su(n)){var a=!0;Pu(t)}else a=!1;if(qu(t,u),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),fa(t,n,r),pa(t,n,r,u),r=!0;else if(null===e){var o=t.stateNode,l=t.memoizedProps;o.props=l;var i=o.context,s=n.contextType;s="object"==typeof s&&null!==s?Zu(s):_u(t,s=Su(n)?ku:wu.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof o.getSnapshotBeforeUpdate;f||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==r||i!==s)&&da(t,o,r,s),Yu=!1;var d=t.memoizedState;o.state=d,aa(t,r,o,u),i=t.memoizedState,l!==r||d!==i||xu.current||Yu?("function"==typeof c&&(ia(t,n,c,r),i=t.memoizedState),(l=Yu||ca(t,n,l,r,d,i,s))?(f||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=i),o.props=r,o.state=i,o.context=s,r=l):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,ea(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Uu(t.type,l),o.props=s,f=t.pendingProps,d=o.context,i="object"==typeof(i=n.contextType)&&null!==i?Zu(i):_u(t,i=Su(n)?ku:wu.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(l!==f||d!==i)&&da(t,o,r,i),Yu=!1,d=t.memoizedState,o.state=d,aa(t,r,o,u);var g=t.memoizedState;l!==f||d!==g||xu.current||Yu?("function"==typeof p&&(ia(t,n,p,r),g=t.memoizedState),(s=Yu||ca(t,n,s,r,d,g,i)||!1)?(c||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,g,i),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,g,i)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=g),o.props=r,o.state=g,o.context=i,r=s):("function"!=typeof o.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return xl(e,t,n,r,a,u)}function xl(e,t,n,r,u,a){Al(e,t);var o=0!=(128&t.flags);if(!r&&!o)return u&&Tu(t,n,!1),zl(e,t,a);r=t.stateNode,ml.current=t;var l=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=Ha(t,e.child,null,a),t.child=Ha(t,null,l,a)):vl(e,t,l,a),t.memoizedState=r.state,u&&Tu(t,n,!0),t.child}function kl(e){var t=e.stateNode;t.pendingContext?Mu(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Mu(0,t.context,!1),Za(e,t.containerInfo)}function _l(e,t,n,r,u){return Ia(),ja(u),t.flags|=256,vl(e,t,n,r),t.child}var Sl={dehydrated:null,treeContext:null,retryLane:0};function Bl(e){return{baseLanes:e,cachePool:null}}function Ml(e,t,n){var r,u=t.pendingProps,o=eo.current,l=!1,i=0!=(128&t.flags);if((r=i)||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(o|=1),Au(eo,1&o),null===e)return Ta(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(o=u.children,e=u.fallback,l?(u=t.mode,l=t.child,o={mode:"hidden",children:o},0==(1&u)&&null!==l?(l.childLanes=0,l.pendingProps=o):l=Fs(o,u,0,null),e=As(e,u,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Bl(n),t.memoizedState=Sl,e):Nl(t,o));if(null!==(o=e.memoizedState)){if(null!==(r=o.dehydrated)){if(i)return 256&t.flags?(t.flags&=-257,Ol(e,t,n,Error(a(422)))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(l=u.fallback,o=t.mode,u=Fs({mode:"visible",children:u.children},o,0,null),(l=As(l,o,n,null)).flags|=2,u.return=t,l.return=t,u.sibling=l,t.child=u,0!=(1&t.mode)&&Ha(t,e.child,null,n),t.child.memoizedState=Bl(n),t.memoizedState=Sl,l);if(0==(1&t.mode))t=Ol(e,t,n,null);else if("$!"===r.data)t=Ol(e,t,n,Error(a(419)));else if(u=0!=(n&e.childLanes),Dl||u){if(null!==(u=Di)){switch(n&-n){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}0!==(u=0!=(l&(u.suspendedLanes|n))?0:l)&&u!==o.retryLane&&(o.retryLane=u,Hi(e,u,-1))}rs(),t=Ol(e,t,n,Error(a(421)))}else"$?"===r.data?(t.flags|=128,t.child=e.child,t=hs.bind(null,e),r._reactRetry=t,t=null):(n=o.treeContext,_a=ou(r.nextSibling),ka=t,Sa=!0,Ba=null,null!==n&&(va[ya++]=Ca,va[ya++]=Ea,va[ya++]=ba,Ca=n.id,Ea=n.overflow,ba=t),(t=Nl(t,t.pendingProps.children)).flags|=4096);return t}return l?(u=Tl(e,t,u.children,u.fallback,n),l=t.child,o=e.child.memoizedState,l.memoizedState=null===o?Bl(n):{baseLanes:o.baseLanes|n,cachePool:null},l.childLanes=e.childLanes&~n,t.memoizedState=Sl,u):(n=Pl(e,t,u.children,n),t.memoizedState=null,n)}return l?(u=Tl(e,t,u.children,u.fallback,n),l=t.child,o=e.child.memoizedState,l.memoizedState=null===o?Bl(n):{baseLanes:o.baseLanes|n,cachePool:null},l.childLanes=e.childLanes&~n,t.memoizedState=Sl,u):(n=Pl(e,t,u.children,n),t.memoizedState=null,n)}function Nl(e,t){return(t=Fs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Pl(e,t,n,r){var u=e.child;return e=u.sibling,n=Cs(u,{mode:"visible",children:n}),0==(1&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(null===(r=t.deletions)?(t.deletions=[e],t.flags|=16):r.push(e)),t.child=n}function Tl(e,t,n,r,u){var a=t.mode,o=(e=e.child).sibling,l={mode:"hidden",children:n};return 0==(1&a)&&t.child!==e?((n=t.child).childLanes=0,n.pendingProps=l,t.deletions=null):(n=Cs(e,l)).subtreeFlags=14680064&e.subtreeFlags,null!==o?r=Cs(o,r):(r=As(r,a,u,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Ol(e,t,n,r){return null!==r&&ja(r),Ha(t,e.child,null,n),(e=Nl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Ll(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Qu(e.return,t,n)}function Il(e,t,n,r,u){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:u}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=u)}function jl(e,t,n){var r=t.pendingProps,u=r.revealOrder,a=r.tail;if(vl(e,t,r.children,n),0!=(2&(r=eo.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ll(e,n,t);else if(19===e.tag)Ll(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Au(eo,r),0==(1&t.mode))t.memoizedState=null;else switch(u){case"forwards":for(n=t.child,u=null;null!==n;)null!==(e=n.alternate)&&null===to(e)&&(u=n),n=n.sibling;null===(n=u)?(u=t.child,t.child=null):(u=n.sibling,n.sibling=null),Il(t,!1,u,n,a);break;case"backwards":for(n=null,u=t.child,t.child=null;null!==u;){if(null!==(e=u.alternate)&&null===to(e)){t.child=u;break}e=u.sibling,u.sibling=n,n=u,u=e}Il(t,!0,n,null,a);break;case"together":Il(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function zl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fi|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Cs(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Cs(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Rl(e,t){switch(xa(t),t.tag){case 1:return Su(t.type)&&Bu(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Xa(),Eu(xu),Eu(wu),ro(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Ja(t),null;case 13:if(Eu(eo),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));Ia()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Eu(eo),null;case 4:return Xa(),null;case 10:return Ku(t.type._context),null;case 22:case 23:return Ji(),null;default:return null}}var Ul=!1,$l=!1,Hl="function"==typeof WeakSet?WeakSet:Set,Vl=null;function Wl(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){ds(e,t,n)}else n.current=null}function Gl(e,t,n){try{n()}catch(n){ds(e,t,n)}}var Kl=!1;function Ql(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var u=r=r.next;do{if((u.tag&e)===e){var a=u.destroy;u.destroy=void 0,void 0!==a&&Gl(t,n,a)}u=u.next}while(u!==r)}}function ql(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Zl(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function Xl(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ut,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e=e.next;do{var u=r,a=u.destroy;u=u.tag,void 0!==a&&(0!=(2&u)||0!=(4&u))&&Gl(t,n,a),r=r.next}while(r!==e)}break;case 1:if(Wl(t,n),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){ds(t,n,e)}break;case 5:Wl(t,n);break;case 4:ui(e,t,n)}}function Yl(e){var t=e.alternate;null!==t&&(e.alternate=null,Yl(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[su],delete t[cu],delete t[du],delete t[pu],delete t[gu]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Jl(e){return 5===e.tag||3===e.tag||4===e.tag}function ei(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||Jl(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ti(e){e:{for(var t=e.return;null!==t;){if(Jl(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(n.tag){case 5:t=n.stateNode,32&n.flags&&(de(t,""),n.flags&=-33),ri(e,n=ei(e),t);break;case 3:case 4:t=n.stateNode.containerInfo,ni(e,n=ei(e),t);break;default:throw Error(a(161))}}function ni(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Xr));else if(4!==r&&null!==(e=e.child))for(ni(e,t,n),e=e.sibling;null!==e;)ni(e,t,n),e=e.sibling}function ri(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ri(e,t,n),e=e.sibling;null!==e;)ri(e,t,n),e=e.sibling}function ui(e,t,n){for(var r,u,o=t,l=!1;;){if(!l){l=o.return;e:for(;;){if(null===l)throw Error(a(160));switch(r=l.stateNode,l.tag){case 5:u=!1;break e;case 3:case 4:r=r.containerInfo,u=!0;break e}l=l.return}l=!0}if(5===o.tag||6===o.tag){e:for(var i=e,s=o,c=n,f=s;;)if(Xl(i,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===s)break e;for(;null===f.sibling;){if(null===f.return||f.return===s)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}u?(i=r,s=o.stateNode,8===i.nodeType?i.parentNode.removeChild(s):i.removeChild(s)):r.removeChild(o.stateNode)}else if(18===o.tag)u?(i=r,s=o.stateNode,8===i.nodeType?au(i.parentNode,s):1===i.nodeType&&au(i,s),Ut(i)):au(r,o.stateNode);else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,u=!0,o.child.return=o,o=o.child;continue}}else if(Xl(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(l=!1)}o.sibling.return=o.return,o=o.sibling}}function ai(e,t){switch(t.tag){case 0:case 11:case 14:case 15:return Ql(3,t,t.return),ql(3,t),void Ql(5,t,t.return);case 1:case 12:case 17:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,u=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for("input"===e&&"radio"===r.type&&null!=r.name&&X(n,r),ye(e,u),t=ye(e,r),u=0;u<o.length;u+=2){var l=o[u],i=o[u+1];"style"===l?me(n,i):"dangerouslySetInnerHTML"===l?fe(n,i):"children"===l?de(n,i):y(n,l,i,t)}switch(e){case"input":Y(n,r);break;case"textarea":ae(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?ne(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?ne(n,!!r.multiple,r.defaultValue,!0):ne(n,!!r.multiple,r.multiple?[]:"",!1))}n[cu]=r}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void(null!==e&&e.memoizedState.isDehydrated&&Ut(t.stateNode.containerInfo));case 13:case 19:return void function(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Hl),t.forEach((function(t){var r=ms.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}(t)}throw Error(a(163))}function oi(e,t,n){Vl=e,li(e,t,n)}function li(e,t,n){for(var r=0!=(1&e.mode);null!==Vl;){var u=Vl,a=u.child;if(22===u.tag&&r){var o=null!==u.memoizedState||Ul;if(!o){var l=u.alternate,i=null!==l&&null!==l.memoizedState||$l;l=Ul;var s=$l;if(Ul=o,($l=i)&&!s)for(Vl=u;null!==Vl;)i=(o=Vl).child,22===o.tag&&null!==o.memoizedState?ci(u):null!==i?(i.return=o,Vl=i):ci(u);for(;null!==a;)Vl=a,li(a,t,n),a=a.sibling;Vl=u,Ul=l,$l=s}ii(e)}else 0!=(8772&u.subtreeFlags)&&null!==a?(a.return=u,Vl=a):ii(e)}}function ii(e){for(;null!==Vl;){var t=Vl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:$l||ql(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!$l)if(null===n)r.componentDidMount();else{var u=t.elementType===t.type?n.memoizedProps:Uu(t.type,n.memoizedProps);r.componentDidUpdate(u,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;null!==o&&oa(t,o,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}oa(t,l,n)}break;case 5:var i=t.stateNode;if(null===n&&4&t.flags){n=i;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Ut(d)}}}break;default:throw Error(a(163))}$l||512&t.flags&&Zl(t)}catch(e){ds(t,t.return,e)}}if(t===e){Vl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Vl=n;break}Vl=t.return}}function si(e){for(;null!==Vl;){var t=Vl;if(t===e){Vl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Vl=n;break}Vl=t.return}}function ci(e){for(;null!==Vl;){var t=Vl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ql(4,t)}catch(e){ds(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var u=t.return;try{r.componentDidMount()}catch(e){ds(t,u,e)}}var a=t.return;try{Zl(t)}catch(e){ds(t,a,e)}break;case 5:var o=t.return;try{Zl(t)}catch(e){ds(t,o,e)}}}catch(e){ds(t,t.return,e)}if(t===e){Vl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Vl=l;break}Vl=t.return}}var fi,di=Math.ceil,pi=b.ReactCurrentDispatcher,gi=b.ReactCurrentOwner,hi=b.ReactCurrentBatchConfig,mi=0,Di=null,vi=null,yi=0,bi=0,Ci=Cu(0),Ei=0,Ai=null,Fi=0,wi=0,xi=0,ki=null,_i=null,Si=0,Bi=1/0,Mi=!1,Ni=null,Pi=null,Ti=!1,Oi=null,Li=0,Ii=0,ji=null,zi=-1,Ri=0;function Ui(){return 0!=(6&mi)?Xe():-1!==zi?zi:zi=Xe()}function $i(e){return 0==(1&e.mode)?1:0!=(2&mi)&&0!==yi?yi&-yi:null!==Ru.transition?(0===Ri&&(e=st,0==(4194240&(st<<=1))&&(st=64),Ri=e),Ri):0!==(e=vt)?e:e=void 0===(e=window.event)?16:Qt(e.type)}function Hi(e,t,n){if(50<Ii)throw Ii=0,ji=null,Error(a(185));var r=Vi(e,t);return null===r?null:(mt(r,t,n),0!=(2&mi)&&r===Di||(r===Di&&(0==(2&mi)&&(wi|=t),4===Ei&&qi(r,yi)),Wi(r,n),1===t&&0===mi&&0==(1&e.mode)&&(Bi=Xe()+500,Lu&&zu())),r)}function Vi(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function Wi(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,u=e.expirationTimes,a=e.pendingLanes;0<a;){var o=31-ot(a),l=1<<o,i=u[o];-1===i?0!=(l&n)&&0==(l&r)||(u[o]=pt(l,t)):i<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=dt(e,e===Di?yi:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Lu=!0,ju(e)}(Zi.bind(null,e)):ju(Zi.bind(null,e)),ru((function(){0===mi&&zu()})),n=null;else{switch(yt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ds(n,Gi.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Gi(e,t){if(zi=-1,Ri=0,0!=(6&mi))throw Error(a(327));var n=e.callbackNode;if(cs()&&e.callbackNode!==n)return null;var r=dt(e,e===Di?yi:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=us(e,r);else{t=r;var u=mi;mi|=2;var o=ns();for(Di===e&&yi===t||(Bi=Xe()+500,es(e,t));;)try{os();break}catch(t){ts(e,t)}Gu(),pi.current=o,mi=u,null!==vi?t=0:(Di=null,yi=0,t=Ei)}if(0!==t){if(2===t&&0!==(u=gt(e))&&(r=u,t=Ki(e,u)),1===t)throw n=Ai,es(e,0),qi(e,r),Wi(e,Xe()),n;if(6===t)qi(e,r);else{if(u=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var u=n[r],a=u.getSnapshot;u=u.value;try{if(!ar(a(),u))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(u)&&(2===(t=us(e,r))&&0!==(o=gt(e))&&(r=o,t=Ki(e,o)),1===t))throw n=Ai,es(e,0),qi(e,r),Wi(e,Xe()),n;switch(e.finishedWork=u,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:ss(e,_i);break;case 3:if(qi(e,r),(130023424&r)===r&&10<(t=Si+500-Xe())){if(0!==dt(e,0))break;if(((u=e.suspendedLanes)&r)!==r){Ui(),e.pingedLanes|=e.suspendedLanes&u;break}e.timeoutHandle=eu(ss.bind(null,e,_i),t);break}ss(e,_i);break;case 4:if(qi(e,r),(4194240&r)===r)break;for(t=e.eventTimes,u=-1;0<r;){var l=31-ot(r);o=1<<l,(l=t[l])>u&&(u=l),r&=~o}if(r=u,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*di(r/1960))-r)){e.timeoutHandle=eu(ss.bind(null,e,_i),r);break}ss(e,_i);break;default:throw Error(a(329))}}}return Wi(e,Xe()),e.callbackNode===n?Gi.bind(null,e):null}function Ki(e,t){var n=ki;return e.current.memoizedState.isDehydrated&&(es(e,t).flags|=256),2!==(e=us(e,t))&&(t=_i,_i=n,null!==t&&Qi(t)),e}function Qi(e){null===_i?_i=e:_i.push.apply(_i,e)}function qi(e,t){for(t&=~xi,t&=~wi,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-ot(t),r=1<<n;e[n]=-1,t&=~r}}function Zi(e){if(0!=(6&mi))throw Error(a(327));cs();var t=dt(e,0);if(0==(1&t))return Wi(e,Xe()),null;var n=us(e,t);if(0!==e.tag&&2===n){var r=gt(e);0!==r&&(t=r,n=Ki(e,r))}if(1===n)throw n=Ai,es(e,0),qi(e,t),Wi(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ss(e,_i),Wi(e,Xe()),null}function Xi(e,t){var n=mi;mi|=1;try{return e(t)}finally{0===(mi=n)&&(Bi=Xe()+500,Lu&&zu())}}function Yi(e){null!==Oi&&0===Oi.tag&&0==(6&mi)&&cs();var t=mi;mi|=1;var n=hi.transition,r=vt;try{if(hi.transition=null,vt=1,e)return e()}finally{vt=r,hi.transition=n,0==(6&(mi=t))&&zu()}}function Ji(){bi=Ci.current,Eu(Ci)}function es(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,tu(n)),null!==vi)for(n=vi.return;null!==n;){var r=n;switch(xa(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Bu();break;case 3:Xa(),Eu(xu),Eu(wu),ro();break;case 5:Ja(r);break;case 4:Xa();break;case 13:case 19:Eu(eo);break;case 10:Ku(r.type._context);break;case 22:case 23:Ji()}n=n.return}if(Di=e,vi=e=Cs(e.current,null),yi=bi=t,Ei=0,Ai=null,xi=wi=Fi=0,_i=ki=null,null!==Xu){for(t=0;t<Xu.length;t++)if(null!==(r=(n=Xu[t]).interleaved)){n.interleaved=null;var u=r.next,a=n.pending;if(null!==a){var o=a.next;a.next=u,r.next=o}n.pending=r}Xu=null}return e}function ts(e,t){for(;;){var n=vi;try{if(Gu(),uo.current=Yo,co){for(var r=lo.memoizedState;null!==r;){var u=r.queue;null!==u&&(u.pending=null),r=r.next}co=!1}if(oo=0,so=io=lo=null,fo=!1,po=0,gi.current=null,null===n||null===n.return){Ei=1,Ai=t,vi=null;break}e:{var o=e,l=n.return,i=n,s=t;if(t=yi,i.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=i,d=f.tag;if(0==(1&f.mode)&&(0===d||11===d||15===d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var g=fl(l);if(null!==g){g.flags&=-257,dl(g,l,i,0,t),1&g.mode&&cl(o,c,t),s=c;var h=(t=g).updateQueue;if(null===h){var m=new Set;m.add(s),t.updateQueue=m}else h.add(s);break e}if(0==(1&t)){cl(o,c,t),rs();break e}s=Error(a(426))}else if(Sa&&1&i.mode){var D=fl(l);if(null!==D){0==(65536&D.flags)&&(D.flags|=256),dl(D,l,i,0,t),ja(s);break e}}o=s,4!==Ei&&(Ei=2),null===ki?ki=[o]:ki.push(o),s=nl(s,i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,ua(i,il(0,s,t));break e;case 1:o=s;var v=i.type,y=i.stateNode;if(0==(128&i.flags)&&("function"==typeof v.getDerivedStateFromError||null!==y&&"function"==typeof y.componentDidCatch&&(null===Pi||!Pi.has(y)))){i.flags|=65536,t&=-t,i.lanes|=t,ua(i,sl(i,o,t));break e}}i=i.return}while(null!==i)}is(n)}catch(e){t=e,vi===n&&null!==n&&(vi=n=n.return);continue}break}}function ns(){var e=pi.current;return pi.current=Yo,null===e?Yo:e}function rs(){0!==Ei&&3!==Ei&&2!==Ei||(Ei=4),null===Di||0==(268435455&Fi)&&0==(268435455&wi)||qi(Di,yi)}function us(e,t){var n=mi;mi|=2;var r=ns();for(Di===e&&yi===t||es(e,t);;)try{as();break}catch(t){ts(e,t)}if(Gu(),mi=n,pi.current=r,null!==vi)throw Error(a(261));return Di=null,yi=0,Ei}function as(){for(;null!==vi;)ls(vi)}function os(){for(;null!==vi&&!qe();)ls(vi)}function ls(e){var t=fi(e.alternate,e,bi);e.memoizedProps=e.pendingProps,null===t?is(e):vi=t,gi.current=null}function is(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=hl(n,t,bi)))return void(vi=n)}else{if(null!==(n=Rl(n,t)))return n.flags&=32767,void(vi=n);if(null===e)return Ei=6,void(vi=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(vi=t);vi=t=e}while(null!==t);0===Ei&&(Ei=5)}function ss(e,t){var n=vt,r=hi.transition;try{hi.transition=null,vt=1,function(e,t,n){do{cs()}while(null!==Oi);if(0!=(6&mi))throw Error(a(327));var r=e.finishedWork,u=e.finishedLanes;if(null===r)return null;if(e.finishedWork=null,e.finishedLanes=0,r===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var o=r.lanes|r.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var u=31-ot(n),a=1<<u;t[u]=0,r[u]=-1,e[u]=-1,n&=~a}}(e,o),e===Di&&(vi=Di=null,yi=0),0==(2064&r.subtreeFlags)&&0==(2064&r.flags)||Ti||(Ti=!0,Ds(tt,(function(){return cs(),null}))),o=0!=(15990&r.flags),0!=(15990&r.subtreeFlags)||o){o=hi.transition,hi.transition=null;var l=vt;vt=1;var i=mi;mi|=4,gi.current=null,function(e,t){if(fr(e=cr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var u=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var l=0,i=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var g;d!==n||0!==u&&3!==d.nodeType||(i=l+u),d!==o||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(g=d.firstChild);)p=d,d=g;for(;;){if(d===e)break t;if(p===n&&++c===u&&(i=l),p===o&&++f===r&&(s=l),null!==(g=d.nextSibling))break;p=(d=p).parentNode}d=g}n=-1===i||-1===s?null:{start:i,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(Yr={focusedElem:e,selectionRange:n},Vl=t;null!==Vl;)if(e=(t=Vl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Vl=e;else for(;null!==Vl;){t=Vl;try{var h=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==h){var m=h.memoizedProps,D=h.memoizedState,v=t.stateNode,y=v.getSnapshotBeforeUpdate(t.elementType===t.type?m:Uu(t.type,m),D);v.__reactInternalSnapshotBeforeUpdate=y}break;case 3:var b=t.stateNode.containerInfo;if(1===b.nodeType)b.textContent="";else if(9===b.nodeType){var C=b.body;null!=C&&(C.textContent="")}break;default:throw Error(a(163))}}catch(e){ds(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Vl=e;break}Vl=t.return}h=Kl,Kl=!1}(e,r),function(e,t){for(Vl=t;null!==Vl;){var n=(t=Vl).deletions;if(null!==n)for(var r=0;r<n.length;r++){var u=n[r];try{ui(e,u,t);var a=u.alternate;null!==a&&(a.return=null),u.return=null}catch(e){ds(u,t,e)}}if(n=t.child,0!=(12854&t.subtreeFlags)&&null!==n)n.return=t,Vl=n;else for(;null!==Vl;){t=Vl;try{var o=t.flags;if(32&o&&de(t.stateNode,""),512&o){var l=t.alternate;if(null!==l){var i=l.ref;null!==i&&("function"==typeof i?i(null):i.current=null)}}if(8192&o)switch(t.tag){case 13:if(null!==t.memoizedState){var s=t.alternate;null!==s&&null!==s.memoizedState||(Si=Xe())}break;case 22:var c=null!==t.memoizedState,f=t.alternate,d=null!==f&&null!==f.memoizedState;e:{u=c;for(var p=null,g=r=n=t;;){if(5===g.tag){if(null===p){p=g;var h=g.stateNode;if(u){var m=h.style;"function"==typeof m.setProperty?m.setProperty("display","none","important"):m.display="none"}else{var D=g.stateNode,v=g.memoizedProps.style,y=null!=v&&v.hasOwnProperty("display")?v.display:null;D.style.display=he("display",y)}}}else if(6===g.tag)null===p&&(g.stateNode.nodeValue=u?"":g.memoizedProps);else if((22!==g.tag&&23!==g.tag||null===g.memoizedState||g===r)&&null!==g.child){g.child.return=g,g=g.child;continue}if(g===r)break;for(;null===g.sibling;){if(null===g.return||g.return===r)break e;p===g&&(p=null),g=g.return}p===g&&(p=null),g.sibling.return=g.return,g=g.sibling}}if(c&&!d&&0!=(1&n.mode)){Vl=n;for(var b=n.child;null!==b;){for(n=Vl=b;null!==Vl;){var C=(r=Vl).child;switch(r.tag){case 0:case 11:case 14:case 15:Ql(4,r,r.return);break;case 1:Wl(r,r.return);var E=r.stateNode;if("function"==typeof E.componentWillUnmount){var A=r.return;try{E.props=r.memoizedProps,E.state=r.memoizedState,E.componentWillUnmount()}catch(e){ds(r,A,e)}}break;case 5:Wl(r,r.return);break;case 22:if(null!==r.memoizedState){si(n);continue}}null!==C?(C.return=r,Vl=C):si(n)}b=b.sibling}}}switch(4102&o){case 2:ti(t),t.flags&=-3;break;case 6:ti(t),t.flags&=-3,ai(t.alternate,t);break;case 4096:t.flags&=-4097;break;case 4100:t.flags&=-4097,ai(t.alternate,t);break;case 4:ai(t.alternate,t)}}catch(e){ds(t,t.return,e)}if(null!==(n=t.sibling)){n.return=t.return,Vl=n;break}Vl=t.return}}}(e,r),dr(Yr),Yr=null,e.current=r,oi(r,e,u),Ze(),mi=i,vt=l,hi.transition=o}else e.current=r;if(Ti&&(Ti=!1,Oi=e,Li=u),0===(o=e.pendingLanes)&&(Pi=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ut,e,void 0,128==(128&e.current.flags))}catch(e){}}(r.stateNode),Wi(e,Xe()),null!==t)for(n=e.onRecoverableError,r=0;r<t.length;r++)n(t[r]);if(Mi)throw Mi=!1,e=Ni,Ni=null,e;0!=(1&Li)&&0!==e.tag&&cs(),0!=(1&(o=e.pendingLanes))?e===ji?Ii++:(Ii=0,ji=e):Ii=0,zu()}(e,t,n)}finally{hi.transition=r,vt=n}return null}function cs(){if(null!==Oi){var e=yt(Li),t=hi.transition,n=vt;try{if(hi.transition=null,vt=16>e?16:e,null===Oi)var r=!1;else{if(e=Oi,Oi=null,Li=0,0!=(6&mi))throw Error(a(331));var u=mi;for(mi|=4,Vl=e.current;null!==Vl;){var o=Vl,l=o.child;if(0!=(16&Vl.flags)){var i=o.deletions;if(null!==i){for(var s=0;s<i.length;s++){var c=i[s];for(Vl=c;null!==Vl;){var f=Vl;switch(f.tag){case 0:case 11:case 15:Ql(8,f,o)}var d=f.child;if(null!==d)d.return=f,Vl=d;else for(;null!==Vl;){var p=(f=Vl).sibling,g=f.return;if(Yl(f),f===c){Vl=null;break}if(null!==p){p.return=g,Vl=p;break}Vl=g}}}var h=o.alternate;if(null!==h){var m=h.child;if(null!==m){h.child=null;do{var D=m.sibling;m.sibling=null,m=D}while(null!==m)}}Vl=o}}if(0!=(2064&o.subtreeFlags)&&null!==l)l.return=o,Vl=l;else e:for(;null!==Vl;){if(0!=(2048&(o=Vl).flags))switch(o.tag){case 0:case 11:case 15:Ql(9,o,o.return)}var v=o.sibling;if(null!==v){v.return=o.return,Vl=v;break e}Vl=o.return}}var y=e.current;for(Vl=y;null!==Vl;){var b=(l=Vl).child;if(0!=(2064&l.subtreeFlags)&&null!==b)b.return=l,Vl=b;else e:for(l=y;null!==Vl;){if(0!=(2048&(i=Vl).flags))try{switch(i.tag){case 0:case 11:case 15:ql(9,i)}}catch(e){ds(i,i.return,e)}if(i===l){Vl=null;break e}var C=i.sibling;if(null!==C){C.return=i.return,Vl=C;break e}Vl=i.return}}if(mi=u,zu(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ut,e)}catch(e){}r=!0}return r}finally{vt=n,hi.transition=t}}return!1}function fs(e,t,n){na(e,t=il(0,t=nl(n,t),1)),t=Ui(),null!==(e=Vi(e,1))&&(mt(e,1,t),Wi(e,t))}function ds(e,t,n){if(3===e.tag)fs(e,e,n);else for(;null!==t;){if(3===t.tag){fs(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Pi||!Pi.has(r))){na(t,e=sl(t,e=nl(n,e),1)),e=Ui(),null!==(t=Vi(t,1))&&(mt(t,1,e),Wi(t,e));break}}t=t.return}}function ps(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=Ui(),e.pingedLanes|=e.suspendedLanes&n,Di===e&&(yi&n)===n&&(4===Ei||3===Ei&&(130023424&yi)===yi&&500>Xe()-Si?es(e,0):xi|=n),Wi(e,t)}function gs(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=Ui();null!==(e=Vi(e,t))&&(mt(e,t,n),Wi(e,n))}function hs(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),gs(e,n)}function ms(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,u=e.memoizedState;null!==u&&(n=u.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),gs(e,n)}function Ds(e,t){return Ke(e,t)}function vs(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function ys(e,t,n,r){return new vs(e,t,n,r)}function bs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Cs(e,t){var n=e.alternate;return null===n?((n=ys(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Es(e,t,n,r,u,o){var l=2;if(r=e,"function"==typeof e)bs(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case A:return As(n.children,u,o,t);case F:l=8,u|=8;break;case w:return(e=ys(12,n,t,2|u)).elementType=w,e.lanes=o,e;case S:return(e=ys(13,n,t,u)).elementType=S,e.lanes=o,e;case B:return(e=ys(19,n,t,u)).elementType=B,e.lanes=o,e;case P:return Fs(n,u,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case x:l=10;break e;case k:l=9;break e;case _:l=11;break e;case M:l=14;break e;case N:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=ys(l,n,t,u)).elementType=e,t.type=r,t.lanes=o,t}function As(e,t,n,r){return(e=ys(7,e,r,t)).lanes=n,e}function Fs(e,t,n,r){return(e=ys(22,e,r,t)).elementType=P,e.lanes=n,e.stateNode={},e}function ws(e,t,n){return(e=ys(6,e,null,t)).lanes=n,e}function xs(e,t,n){return(t=ys(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function ks(e,t,n,r,u){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=ht(0),this.expirationTimes=ht(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ht(0),this.identifierPrefix=r,this.onRecoverableError=u,this.mutableSourceEagerHydrationData=null}function _s(e,t,n,r,u,a,o,l,i){return e=new ks(e,t,n,l,i),1===t?(t=1,!0===a&&(t|=8)):t=0,a=ys(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null},Ju(a),e}function Ss(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Bs(e){if(!e)return Fu;e:{if($e(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Su(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Su(n))return Nu(e,n,t)}return t}function Ms(e,t,n,r,u,a,o,l,i){return(e=_s(n,r,!0,e,0,a,0,l,i)).context=Bs(null),n=e.current,(a=ta(r=Ui(),u=$i(n))).callback=null!=t?t:null,na(n,a),e.current.lanes=u,mt(e,u,r),Wi(e,r),e}function Ns(e,t,n,r){var u=t.current,a=Ui(),o=$i(u);return n=Bs(n),null===t.context?t.context=n:t.pendingContext=n,(t=ta(a,o)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),na(u,t),null!==(e=Hi(u,o,a))&&ra(e,u,o),o}function Ps(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ts(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Os(e,t){Ts(e,t),(e=e.alternate)&&Ts(e,t)}fi=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||xu.current)Dl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return Dl=!1,function(e,t,n){switch(t.tag){case 3:kl(t),Ia();break;case 5:Ya(t);break;case 1:Su(t.type)&&Pu(t);break;case 4:Za(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,u=t.memoizedProps.value;Au($u,r._currentValue),r._currentValue=u;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Au(eo,1&eo.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ml(e,t,n):(Au(eo,1&eo.current),null!==(e=zl(e,t,n))?e.sibling:null);Au(eo,1&eo.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return jl(e,t,n);t.flags|=128}if(null!==(u=t.memoizedState)&&(u.rendering=null,u.tail=null,u.lastEffect=null),Au(eo,eo.current),r)break;return null;case 22:case 23:return t.lanes=0,El(e,t,n)}return zl(e,t,n)}(e,t,n);Dl=0!=(131072&e.flags)}else Dl=!1,Sa&&0!=(1048576&t.flags)&&Fa(t,Da,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps;var u=_u(t,wu.current);qu(t,n),u=Do(null,t,r,e,u,n);var o=vo();return t.flags|=1,"object"==typeof u&&null!==u&&"function"==typeof u.render&&void 0===u.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Su(r)?(o=!0,Pu(t)):o=!1,t.memoizedState=null!==u.state&&void 0!==u.state?u.state:null,Ju(t),u.updater=sa,t.stateNode=u,u._reactInternals=t,pa(t,r,e,n),t=xl(null,t,r,!0,o,n)):(t.tag=0,Sa&&o&&wa(t),vl(null,t,u,n),t=t.child),t;case 16:r=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,r=(u=r._init)(r._payload),t.type=r,u=t.tag=function(e){if("function"==typeof e)return bs(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===M)return 14}return 2}(r),e=Uu(r,e),u){case 0:t=Fl(null,t,r,e,n);break e;case 1:t=wl(null,t,r,e,n);break e;case 11:t=yl(null,t,r,e,n);break e;case 14:t=bl(null,t,r,Uu(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,u=t.pendingProps,Fl(e,t,r,u=t.elementType===r?u:Uu(r,u),n);case 1:return r=t.type,u=t.pendingProps,wl(e,t,r,u=t.elementType===r?u:Uu(r,u),n);case 3:e:{if(kl(t),null===e)throw Error(a(387));r=t.pendingProps,u=(o=t.memoizedState).element,ea(e,t),aa(t,r,null,n);var l=t.memoizedState;if(r=l.element,o.isDehydrated){if(o={element:r,isDehydrated:!1,cache:l.cache,transitions:l.transitions},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=_l(e,t,r,n,u=Error(a(423)));break e}if(r!==u){t=_l(e,t,r,n,u=Error(a(424)));break e}for(_a=ou(t.stateNode.containerInfo.firstChild),ka=t,Sa=!0,Ba=null,n=Va(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(Ia(),r===u){t=zl(e,t,n);break e}vl(e,t,r,n)}t=t.child}return t;case 5:return Ya(t),null===e&&Ta(t),r=t.type,u=t.pendingProps,o=null!==e?e.memoizedProps:null,l=u.children,Jr(r,u)?l=null:null!==o&&Jr(r,o)&&(t.flags|=32),Al(e,t),vl(e,t,l,n),t.child;case 6:return null===e&&Ta(t),null;case 13:return Ml(e,t,n);case 4:return Za(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ha(t,null,r,n):vl(e,t,r,n),t.child;case 11:return r=t.type,u=t.pendingProps,yl(e,t,r,u=t.elementType===r?u:Uu(r,u),n);case 7:return vl(e,t,t.pendingProps,n),t.child;case 8:case 12:return vl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,u=t.pendingProps,o=t.memoizedProps,l=u.value,Au($u,r._currentValue),r._currentValue=l,null!==o)if(ar(o.value,l)){if(o.children===u.children&&!xu.current){t=zl(e,t,n);break e}}else for(null!==(o=t.child)&&(o.return=t);null!==o;){var i=o.dependencies;if(null!==i){l=o.child;for(var s=i.firstContext;null!==s;){if(s.context===r){if(1===o.tag){(s=ta(-1,n&-n)).tag=2;var c=o.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}o.lanes|=n,null!==(s=o.alternate)&&(s.lanes|=n),Qu(o.return,n,t),i.lanes|=n;break}s=s.next}}else if(10===o.tag)l=o.type===t.type?null:o.child;else if(18===o.tag){if(null===(l=o.return))throw Error(a(341));l.lanes|=n,null!==(i=l.alternate)&&(i.lanes|=n),Qu(l,n,t),l=o.sibling}else l=o.child;if(null!==l)l.return=o;else for(l=o;null!==l;){if(l===t){l=null;break}if(null!==(o=l.sibling)){o.return=l.return,l=o;break}l=l.return}o=l}vl(e,t,u.children,n),t=t.child}return t;case 9:return u=t.type,r=t.pendingProps.children,qu(t,n),r=r(u=Zu(u)),t.flags|=1,vl(e,t,r,n),t.child;case 14:return u=Uu(r=t.type,t.pendingProps),bl(e,t,r,u=Uu(r.type,u),n);case 15:return Cl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,u=t.pendingProps,u=t.elementType===r?u:Uu(r,u),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,Su(r)?(e=!0,Pu(t)):e=!1,qu(t,n),fa(t,r,u),pa(t,r,u,n),xl(null,t,r,!0,e,n);case 19:return jl(e,t,n);case 22:return El(e,t,n)}throw Error(a(156,t.tag))};var Ls="function"==typeof reportError?reportError:function(e){console.error(e)};function Is(e){this._internalRoot=e}function js(e){this._internalRoot=e}function zs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Rs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Us(){}function $s(e,t,n,r,u){var a=n._reactRootContainer;if(a){var o=a;if("function"==typeof u){var l=u;u=function(){var e=Ps(o);l.call(e)}}Ns(t,o,e,u)}else o=function(e,t,n,r,u){if(u){if("function"==typeof r){var a=r;r=function(){var e=Ps(o);a.call(e)}}var o=Ms(t,r,e,0,null,!1,0,"",Us);return e._reactRootContainer=o,e[fu]=o.current,Rr(8===e.nodeType?e.parentNode:e),Yi(),o}for(;u=e.lastChild;)e.removeChild(u);if("function"==typeof r){var l=r;r=function(){var e=Ps(i);l.call(e)}}var i=_s(e,0,!1,null,0,!1,0,"",Us);return e._reactRootContainer=i,e[fu]=i.current,Rr(8===e.nodeType?e.parentNode:e),Yi((function(){Ns(t,i,n,r)})),i}(n,t,e,u,r);return Ps(o)}js.prototype.render=Is.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Ns(e,t,null,null)},js.prototype.unmount=Is.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;Yi((function(){Ns(null,e,null,null)})),t[fu]=null}},js.prototype.unstable_scheduleHydration=function(e){if(e){var t=At();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Nt.length&&0!==t&&t<Nt[n].priority;n++);Nt.splice(n,0,e),0===n&&Lt(e)}},bt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(Dt(t,1|n),Wi(t,Xe()),0==(6&mi)&&(Bi=Xe()+500,zu()))}break;case 13:var r=Ui();Yi((function(){return Hi(e,1,r)})),Os(e,1)}},Ct=function(e){13===e.tag&&(Hi(e,134217728,Ui()),Os(e,134217728))},Et=function(e){if(13===e.tag){var t=Ui(),n=$i(e);Hi(e,n,t),Os(e,n)}},At=function(){return vt},Ft=function(e,t){var n=vt;try{return vt=e,t()}finally{vt=n}},Ee=function(e,t,n){switch(t){case"input":if(Y(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var u=vu(r);if(!u)throw Error(a(90));K(r),Y(r,u)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},_e=Xi,Se=Yi;var Hs={usingClientEntryPoint:!1,Events:[mu,Du,vu,xe,ke,Xi]},Vs={findFiberByHostInstance:hu,bundleType:0,version:"18.0.0-fc46dba67-20220329",rendererPackageName:"react-dom"},Ws={bundleType:Vs.bundleType,version:Vs.version,rendererPackageName:Vs.rendererPackageName,rendererConfig:Vs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:b.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:Vs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.0.0-fc46dba67-20220329"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var Gs=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Gs.isDisabled&&Gs.supportsFiber)try{ut=Gs.inject(Ws),at=Gs}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Hs,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!zs(t))throw Error(a(200));return Ss(e,t,null,n)},t.createRoot=function(e,t){if(!zs(e))throw Error(a(299));var n=!1,r="",u=Ls;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(u=t.onRecoverableError)),t=_s(e,1,!1,null,0,n,0,r,u),e[fu]=t.current,Rr(8===e.nodeType?e.parentNode:e),new Is(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return Yi(e)},t.hydrate=function(e,t,n){if(!Rs(t))throw Error(a(200));return $s(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!zs(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,u=!1,o="",l=Ls;if(null!=n&&(!0===n.unstable_strictMode&&(u=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Ms(t,null,e,1,null!=n?n:null,u,0,o,l),e[fu]=t.current,Rr(e),r)for(e=0;e<r.length;e++)u=(u=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,u]:t.mutableSourceEagerHydrationData.push(n,u);return new js(t)},t.render=function(e,t,n){if(!Rs(t))throw Error(a(200));return $s(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Rs(e))throw Error(a(40));return!!e._reactRootContainer&&(Yi((function(){$s(null,null,e,!1,(function(){e._reactRootContainer=null,e[fu]=null}))})),!0)},t.unstable_batchedUpdates=Xi,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Rs(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return $s(e,t,n,!1,r)},t.version="18.0.0-fc46dba67-20220329"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},460:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(7294));function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var i=90,s=219,c=222,f=192,d=100,p=3e3,g="navigator"in n.g&&/Win/i.test(navigator.platform),h="navigator"in n.g&&/(Mac|iPhone|iPod|iPad)/i.test(navigator.platform),m=function(e){function t(){var e,n,u;o(this,t);for(var a=arguments.length,m=Array(a),D=0;D<a;D++)m[D]=arguments[D];return n=u=l(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(m))),u.state={capture:!0},u._recordCurrentState=function(){var e=u._input;if(e){var t=e.value,n=e.selectionStart,r=e.selectionEnd;u._recordChange({value:t,selectionStart:n,selectionEnd:r})}},u._getLines=function(e,t){return e.substring(0,t).split("\n")},u._recordChange=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=u._history,a=n.stack,o=n.offset;if(a.length&&o>-1){u._history.stack=a.slice(0,o+1);var l=u._history.stack.length;if(l>d){var i=l-d;u._history.stack=a.slice(i,l),u._history.offset=Math.max(u._history.offset-i,0)}}var s=Date.now();if(t){var c=u._history.stack[u._history.offset];if(c&&s-c.timestamp<p){var f=/[^a-z0-9]([a-z0-9]+)$/i,g=u._getLines(c.value,c.selectionStart).pop().match(f),h=u._getLines(e.value,e.selectionStart).pop().match(f);if(g&&h&&h[1].startsWith(g[1]))return void(u._history.stack[u._history.offset]=r({},e,{timestamp:s}))}}u._history.stack.push(r({},e,{timestamp:s})),u._history.offset++},u._updateInput=function(e){var t=u._input;t&&(t.value=e.value,t.selectionStart=e.selectionStart,t.selectionEnd=e.selectionEnd,u.props.onValueChange(e.value))},u._applyEdits=function(e){var t=u._input,n=u._history.stack[u._history.offset];n&&t&&(u._history.stack[u._history.offset]=r({},n,{selectionStart:t.selectionStart,selectionEnd:t.selectionEnd})),u._recordChange(e),u._updateInput(e)},u._undoEdit=function(){var e=u._history,t=e.stack,n=e.offset,r=t[n-1];r&&(u._updateInput(r),u._history.offset=Math.max(n-1,0))},u._redoEdit=function(){var e=u._history,t=e.stack,n=e.offset,r=t[n+1];r&&(u._updateInput(r),u._history.offset=Math.min(n+1,t.length-1))},u._handleKeyDown=function(e){var t=u.props,n=t.tabSize,r=t.insertSpaces,a=t.ignoreTabKey,o=t.onKeyDown;if(!o||(o(e),!e.defaultPrevented)){27===e.keyCode&&e.target.blur();var l=e.target,d=l.value,p=l.selectionStart,m=l.selectionEnd,D=(r?" ":"\t").repeat(n);if(9===e.keyCode&&!a&&u.state.capture)if(e.preventDefault(),e.shiftKey){var v=u._getLines(d,p),y=v.length-1,b=u._getLines(d,m).length-1,C=d.split("\n").map((function(e,t){return t>=y&&t<=b&&e.startsWith(D)?e.substring(D.length):e})).join("\n");if(d!==C){var E=v[y];u._applyEdits({value:C,selectionStart:E.startsWith(D)?p-D.length:p,selectionEnd:m-(d.length-C.length)})}}else if(p!==m){var A=u._getLines(d,p),F=A.length-1,w=u._getLines(d,m).length-1,x=A[F];u._applyEdits({value:d.split("\n").map((function(e,t){return t>=F&&t<=w?D+e:e})).join("\n"),selectionStart:/\S/.test(x)?p+D.length:p,selectionEnd:m+D.length*(w-F+1)})}else{var k=p+D.length;u._applyEdits({value:d.substring(0,p)+D+d.substring(m),selectionStart:k,selectionEnd:k})}else if(8===e.keyCode){var _=p!==m;if(d.substring(0,p).endsWith(D)&&!_){e.preventDefault();var S=p-D.length;u._applyEdits({value:d.substring(0,p-D.length)+d.substring(m),selectionStart:S,selectionEnd:S})}}else if(13===e.keyCode){if(p===m){var B=u._getLines(d,p).pop().match(/^\s+/);if(B&&B[0]){e.preventDefault();var M="\n"+B[0],N=p+M.length;u._applyEdits({value:d.substring(0,p)+M+d.substring(m),selectionStart:N,selectionEnd:N})}}}else if(57===e.keyCode||e.keyCode===s||e.keyCode===c||e.keyCode===f){var P=void 0;57===e.keyCode&&e.shiftKey?P=["(",")"]:e.keyCode===s?P=e.shiftKey?["{","}"]:["[","]"]:e.keyCode===c?P=e.shiftKey?['"','"']:["'","'"]:e.keyCode!==f||e.shiftKey||(P=["`","`"]),p!==m&&P&&(e.preventDefault(),u._applyEdits({value:d.substring(0,p)+P[0]+d.substring(p,m)+P[1]+d.substring(m),selectionStart:p,selectionEnd:m+2}))}else!(h?e.metaKey&&e.keyCode===i:e.ctrlKey&&e.keyCode===i)||e.shiftKey||e.altKey?(h?e.metaKey&&e.keyCode===i&&e.shiftKey:g?e.ctrlKey&&89===e.keyCode:e.ctrlKey&&e.keyCode===i&&e.shiftKey)&&!e.altKey?(e.preventDefault(),u._redoEdit()):77!==e.keyCode||!e.ctrlKey||h&&!e.shiftKey||(e.preventDefault(),u.setState((function(e){return{capture:!e.capture}}))):(e.preventDefault(),u._undoEdit())}},u._handleChange=function(e){var t=e.target,n=t.value,r=t.selectionStart,a=t.selectionEnd;u._recordChange({value:n,selectionStart:r,selectionEnd:a},!0),u.props.onValueChange(n)},u._history={stack:[],offset:-1},l(u,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"componentDidMount",value:function(){this._recordCurrentState()}},{key:"render",value:function(){var e=this,t=this.props,n=t.value,u=t.style,o=t.padding,l=t.highlight,i=t.textareaId,s=t.textareaClassName,c=t.autoFocus,f=t.disabled,d=t.form,p=t.maxLength,g=t.minLength,h=t.name,m=t.placeholder,v=t.readOnly,y=t.required,b=t.onClick,C=t.onFocus,E=t.onBlur,A=t.onKeyUp,F=(t.onKeyDown,t.onValueChange,t.tabSize,t.insertSpaces,t.ignoreTabKey,t.preClassName),w=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["value","style","padding","highlight","textareaId","textareaClassName","autoFocus","disabled","form","maxLength","minLength","name","placeholder","readOnly","required","onClick","onFocus","onBlur","onKeyUp","onKeyDown","onValueChange","tabSize","insertSpaces","ignoreTabKey","preClassName"]),x={paddingTop:o,paddingRight:o,paddingBottom:o,paddingLeft:o},k=l(n);return a.createElement("div",r({},w,{style:r({},D.container,u)}),a.createElement("textarea",{ref:function(t){return e._input=t},style:r({},D.editor,D.textarea,x),className:"npm__react-simple-code-editor__textarea"+(s?" "+s:""),id:i,value:n,onChange:this._handleChange,onKeyDown:this._handleKeyDown,onClick:b,onKeyUp:A,onFocus:C,onBlur:E,disabled:f,form:d,maxLength:p,minLength:g,name:h,placeholder:m,readOnly:v,required:y,autoFocus:c,autoCapitalize:"off",autoComplete:"off",autoCorrect:"off",spellCheck:!1,"data-gramm":!1}),a.createElement("pre",r({className:F,"aria-hidden":"true",style:r({},D.editor,D.highlight,x)},"string"==typeof k?{dangerouslySetInnerHTML:{__html:k+"<br />"}}:{children:k})),a.createElement("style",{type:"text/css",dangerouslySetInnerHTML:{__html:"\n/**\n * Reset the text fill color so that placeholder is visible\n */\n.npm__react-simple-code-editor__textarea:empty {\n  -webkit-text-fill-color: inherit !important;\n}\n\n/**\n * Hack to apply on some CSS on IE10 and IE11\n */\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  /**\n    * IE doesn't support '-webkit-text-fill-color'\n    * So we use 'color: transparent' to make the text transparent on IE\n    * Unlike other browsers, it doesn't affect caret color in IE\n    */\n  .npm__react-simple-code-editor__textarea {\n    color: transparent !important;\n  }\n\n  .npm__react-simple-code-editor__textarea::selection {\n    background-color: #accef7 !important;\n    color: transparent !important;\n  }\n}\n"}}))}},{key:"session",get:function(){return{history:this._history}},set:function(e){this._history=e.history}}]),t}(a.Component);m.defaultProps={tabSize:2,insertSpaces:!0,ignoreTabKey:!1,padding:0},t.default=m;var D={container:{position:"relative",textAlign:"left",boxSizing:"border-box",padding:0,overflow:"hidden"},textarea:{position:"absolute",top:0,left:0,height:"100%",width:"100%",resize:"none",color:"inherit",overflow:"hidden",MozOsxFontSmoothing:"grayscale",WebkitFontSmoothing:"antialiased",WebkitTextFillColor:"transparent"},highlight:{position:"relative",pointerEvents:"none"},editor:{margin:0,border:0,background:"none",boxSizing:"inherit",display:"inherit",fontFamily:"inherit",fontSize:"inherit",fontStyle:"inherit",fontVariantLigatures:"inherit",fontWeight:"inherit",letterSpacing:"inherit",lineHeight:"inherit",tabSize:"inherit",textIndent:"inherit",textRendering:"inherit",textTransform:"inherit",whiteSpace:"pre-wrap",wordBreak:"keep-all",overflowWrap:"break-word"}}},2408:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),u=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),i=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h=Object.assign,m={};function D(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||g}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||g}D.prototype.isReactComponent={},D.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},D.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=D.prototype;var b=y.prototype=new v;b.constructor=y,h(b,D.prototype),b.isPureReactComponent=!0;var C=Array.isArray,E=Object.prototype.hasOwnProperty,A={current:null},F={key:!0,ref:!0,__self:!0,__source:!0};function w(e,t,r){var u,a={},o=null,l=null;if(null!=t)for(u in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(o=""+t.key),t)E.call(t,u)&&!F.hasOwnProperty(u)&&(a[u]=t[u]);var i=arguments.length-2;if(1===i)a.children=r;else if(1<i){for(var s=Array(i),c=0;c<i;c++)s[c]=arguments[c+2];a.children=s}if(e&&e.defaultProps)for(u in i=e.defaultProps)void 0===a[u]&&(a[u]=i[u]);return{$$typeof:n,type:e,key:o,ref:l,props:a,_owner:A.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var k=/\/+/g;function _(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function S(e,t,u,a,o){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var i=!1;if(null===e)i=!0;else switch(l){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case n:case r:i=!0}}if(i)return o=o(i=e),e=""===a?"."+_(i,0):a,C(o)?(u="",null!=e&&(u=e.replace(k,"$&/")+"/"),S(o,t,u,"",(function(e){return e}))):null!=o&&(x(o)&&(o=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,u+(!o.key||i&&i.key===o.key?"":(""+o.key).replace(k,"$&/")+"/")+e)),t.push(o)),1;if(i=0,a=""===a?".":a+":",C(e))for(var s=0;s<e.length;s++){var c=a+_(l=e[s],s);i+=S(l,t,u,c,o)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)i+=S(l=l.value,t,u,c=a+_(l,s++),o);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return i}function B(e,t,n){if(null==e)return e;var r=[],u=0;return S(e,r,"","",(function(e){return t.call(n,e,u++)})),r}function M(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},P={transition:null},T={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:P,ReactCurrentOwner:A};t.Children={map:B,forEach:function(e,t,n){B(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return B(e,(function(){t++})),t},toArray:function(e){return B(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=D,t.Fragment=u,t.Profiler=o,t.PureComponent=y,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var u=h({},e.props),a=e.key,o=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,l=A.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var i=e.type.defaultProps;for(s in t)E.call(t,s)&&!F.hasOwnProperty(s)&&(u[s]=void 0===t[s]&&void 0!==i?i[s]:t[s])}var s=arguments.length-2;if(1===s)u.children=r;else if(1<s){i=Array(s);for(var c=0;c<s;c++)i[c]=arguments[c+2];u.children=i}return{$$typeof:n,type:e.type,key:a,ref:o,props:u,_owner:l}},t.createContext=function(e){return(e={$$typeof:i,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=w,t.createFactory=function(e){var t=w.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:M}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=P.transition;P.transition={};try{e()}finally{P.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.0.0-fc46dba67-20220329"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},53:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,u=e[r];if(!(0<a(u,t)))break e;e[r]=t,e[n]=u,n=r}}function r(e){return 0===e.length?null:e[0]}function u(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,u=e.length,o=u>>>1;r<o;){var l=2*(r+1)-1,i=e[l],s=l+1,c=e[s];if(0>a(i,n))s<u&&0>a(c,i)?(e[r]=c,e[s]=n,r=s):(e[r]=i,e[l]=n,r=l);else{if(!(s<u&&0>a(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var l=Date,i=l.now();t.unstable_now=function(){return l.now()-i}}var s=[],c=[],f=1,d=null,p=3,g=!1,h=!1,m=!1,D="function"==typeof setTimeout?setTimeout:null,v="function"==typeof clearTimeout?clearTimeout:null,y="undefined"!=typeof setImmediate?setImmediate:null;function b(e){for(var t=r(c);null!==t;){if(null===t.callback)u(c);else{if(!(t.startTime<=e))break;u(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function C(e){if(m=!1,b(e),!h)if(null!==r(s))h=!0,P(E);else{var t=r(c);null!==t&&T(C,t.startTime-e)}}function E(e,n){h=!1,m&&(m=!1,v(x),x=-1),g=!0;var a=p;try{for(b(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!S());){var o=d.callback;if("function"==typeof o){d.callback=null,p=d.priorityLevel;var l=o(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?d.callback=l:d===r(s)&&u(s),b(n)}else u(s);d=r(s)}if(null!==d)var i=!0;else{var f=r(c);null!==f&&T(C,f.startTime-n),i=!1}return i}finally{d=null,p=a,g=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var A,F=!1,w=null,x=-1,k=5,_=-1;function S(){return!(t.unstable_now()-_<k)}function B(){if(null!==w){var e=t.unstable_now();_=e;var n=!0;try{n=w(!0,e)}finally{n?A():(F=!1,w=null)}}else F=!1}if("function"==typeof y)A=function(){y(B)};else if("undefined"!=typeof MessageChannel){var M=new MessageChannel,N=M.port2;M.port1.onmessage=B,A=function(){N.postMessage(null)}}else A=function(){D(B,0)};function P(e){w=e,F||(F=!0,A())}function T(e,n){x=D((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){h||g||(h=!0,P(E))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):k=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,u,a){var o=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?o+a:o,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:f++,callback:u,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>o?(e.sortIndex=a,n(c,e),null===r(s)&&e===r(c)&&(m?(v(x),x=-1):m=!0,T(C,a-o))):(e.sortIndex=l,n(s,e),h||g||(h=!0,P(E))),e},t.unstable_shouldYield=S,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},3479:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>D});var r=n(3379),u=n.n(r),a=n(7795),o=n.n(a),l=n(569),i=n.n(l),s=n(3565),c=n.n(s),f=n(9216),d=n.n(f),p=n(4589),g=n.n(p),h=n(6938),m={};m.styleTagTransform=g(),m.setAttributes=c(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=d(),u()(h.Z,m);const D=h.Z&&h.Z.locals?h.Z.locals:void 0},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},o=[],l=0;l<e.length;l++){var i=e[l],s=r.base?i[0]+r.base:i[0],c=a[s]||0,f="".concat(s," ").concat(c);a[s]=c+1;var d=n(f),p={css:i[1],media:i[2],sourceMap:i[3],supports:i[4],layer:i[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var g=u(p,r);r.byIndex=l,t.splice(l,0,{identifier:f,updater:g,references:1})}o.push(f)}return o}function u(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,u){var a=r(e=e||[],u=u||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var l=n(a[o]);t[l].references--}for(var i=r(e,u),s=0;s<a.length;s++){var c=n(a[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}a=i}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var u=void 0!==n.layer;u&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,u&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},3390:e=>{var t={exports:{}};function n(e){return e instanceof Map?e.clear=e.delete=e.set=function(){throw new Error("map is read-only")}:e instanceof Set&&(e.add=e.clear=e.delete=function(){throw new Error("set is read-only")}),Object.freeze(e),Object.getOwnPropertyNames(e).forEach((function(t){var r=e[t];"object"!=typeof r||Object.isFrozen(r)||n(r)})),e}t.exports=n,t.exports.default=n;var r=t.exports;class u{constructor(e){void 0===e.data&&(e.data={}),this.data=e.data,this.isMatchIgnored=!1}ignoreMatch(){this.isMatchIgnored=!0}}function a(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")}function o(e,...t){const n=Object.create(null);for(const t in e)n[t]=e[t];return t.forEach((function(e){for(const t in e)n[t]=e[t]})),n}const l=e=>!!e.kind;class i{constructor(e,t){this.buffer="",this.classPrefix=t.classPrefix,e.walk(this)}addText(e){this.buffer+=a(e)}openNode(e){if(!l(e))return;let t=e.kind;t=e.sublanguage?`language-${t}`:((e,{prefix:t})=>{if(e.includes(".")){const n=e.split(".");return[`${t}${n.shift()}`,...n.map(((e,t)=>`${e}${"_".repeat(t+1)}`))].join(" ")}return`${t}${e}`})(t,{prefix:this.classPrefix}),this.span(t)}closeNode(e){l(e)&&(this.buffer+="</span>")}value(){return this.buffer}span(e){this.buffer+=`<span class="${e}">`}}class s{constructor(){this.rootNode={children:[]},this.stack=[this.rootNode]}get top(){return this.stack[this.stack.length-1]}get root(){return this.rootNode}add(e){this.top.children.push(e)}openNode(e){const t={kind:e,children:[]};this.add(t),this.stack.push(t)}closeNode(){if(this.stack.length>1)return this.stack.pop()}closeAllNodes(){for(;this.closeNode(););}toJSON(){return JSON.stringify(this.rootNode,null,4)}walk(e){return this.constructor._walk(e,this.rootNode)}static _walk(e,t){return"string"==typeof t?e.addText(t):t.children&&(e.openNode(t),t.children.forEach((t=>this._walk(e,t))),e.closeNode(t)),e}static _collapse(e){"string"!=typeof e&&e.children&&(e.children.every((e=>"string"==typeof e))?e.children=[e.children.join("")]:e.children.forEach((e=>{s._collapse(e)})))}}class c extends s{constructor(e){super(),this.options=e}addKeyword(e,t){""!==e&&(this.openNode(t),this.addText(e),this.closeNode())}addText(e){""!==e&&this.add(e)}addSublanguage(e,t){const n=e.root;n.kind=t,n.sublanguage=!0,this.add(n)}toHTML(){return new i(this,this.options).value()}finalize(){return!0}}function f(e){return e?"string"==typeof e?e:e.source:null}function d(e){return h("(?=",e,")")}function p(e){return h("(?:",e,")*")}function g(e){return h("(?:",e,")?")}function h(...e){return e.map((e=>f(e))).join("")}function m(...e){const t=function(e){const t=e[e.length-1];return"object"==typeof t&&t.constructor===Object?(e.splice(e.length-1,1),t):{}}(e);return"("+(t.capture?"":"?:")+e.map((e=>f(e))).join("|")+")"}function D(e){return new RegExp(e.toString()+"|").exec("").length-1}const v=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;function y(e,{joinWith:t}){let n=0;return e.map((e=>{n+=1;const t=n;let r=f(e),u="";for(;r.length>0;){const e=v.exec(r);if(!e){u+=r;break}u+=r.substring(0,e.index),r=r.substring(e.index+e[0].length),"\\"===e[0][0]&&e[1]?u+="\\"+String(Number(e[1])+t):(u+=e[0],"("===e[0]&&n++)}return u})).map((e=>`(${e})`)).join(t)}const b="[a-zA-Z]\\w*",C="[a-zA-Z_]\\w*",E="\\b\\d+(\\.\\d+)?",A="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",F="\\b(0b[01]+)",w={begin:"\\\\[\\s\\S]",relevance:0},x={scope:"string",begin:"'",end:"'",illegal:"\\n",contains:[w]},k={scope:"string",begin:'"',end:'"',illegal:"\\n",contains:[w]},_=function(e,t,n={}){const r=o({scope:"comment",begin:e,end:t,contains:[]},n);r.contains.push({scope:"doctag",begin:"[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)",end:/(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,excludeBegin:!0,relevance:0});const u=m("I","a","is","so","us","to","at","if","in","it","on",/[A-Za-z]+['](d|ve|re|ll|t|s|n)/,/[A-Za-z]+[-][a-z]+/,/[A-Za-z][a-z]{2,}/);return r.contains.push({begin:h(/[ ]+/,"(",u,/[.]?[:]?([.][ ]|[ ])/,"){3}")}),r},S=_("//","$"),B=_("/\\*","\\*/"),M=_("#","$"),N={scope:"number",begin:E,relevance:0},P={scope:"number",begin:A,relevance:0},T={scope:"number",begin:F,relevance:0},O={begin:/(?=\/[^/\n]*\/)/,contains:[{scope:"regexp",begin:/\//,end:/\/[gimuy]*/,illegal:/\n/,contains:[w,{begin:/\[/,end:/\]/,relevance:0,contains:[w]}]}]},L={scope:"title",begin:b,relevance:0},I={scope:"title",begin:C,relevance:0};var j=Object.freeze({__proto__:null,MATCH_NOTHING_RE:/\b\B/,IDENT_RE:b,UNDERSCORE_IDENT_RE:C,NUMBER_RE:E,C_NUMBER_RE:A,BINARY_NUMBER_RE:F,RE_STARTERS_RE:"!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",SHEBANG:(e={})=>{const t=/^#![ ]*\//;return e.binary&&(e.begin=h(t,/.*\b/,e.binary,/\b.*/)),o({scope:"meta",begin:t,end:/$/,relevance:0,"on:begin":(e,t)=>{0!==e.index&&t.ignoreMatch()}},e)},BACKSLASH_ESCAPE:w,APOS_STRING_MODE:x,QUOTE_STRING_MODE:k,PHRASAL_WORDS_MODE:{begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},COMMENT:_,C_LINE_COMMENT_MODE:S,C_BLOCK_COMMENT_MODE:B,HASH_COMMENT_MODE:M,NUMBER_MODE:N,C_NUMBER_MODE:P,BINARY_NUMBER_MODE:T,REGEXP_MODE:O,TITLE_MODE:L,UNDERSCORE_TITLE_MODE:I,METHOD_GUARD:{begin:"\\.\\s*[a-zA-Z_]\\w*",relevance:0},END_SAME_AS_BEGIN:function(e){return Object.assign(e,{"on:begin":(e,t)=>{t.data._beginMatch=e[1]},"on:end":(e,t)=>{t.data._beginMatch!==e[1]&&t.ignoreMatch()}})}});function z(e,t){"."===e.input[e.index-1]&&t.ignoreMatch()}function R(e,t){void 0!==e.className&&(e.scope=e.className,delete e.className)}function U(e,t){t&&e.beginKeywords&&(e.begin="\\b("+e.beginKeywords.split(" ").join("|")+")(?!\\.)(?=\\b|\\s)",e.__beforeBegin=z,e.keywords=e.keywords||e.beginKeywords,delete e.beginKeywords,void 0===e.relevance&&(e.relevance=0))}function $(e,t){Array.isArray(e.illegal)&&(e.illegal=m(...e.illegal))}function H(e,t){if(e.match){if(e.begin||e.end)throw new Error("begin & end are not supported with match");e.begin=e.match,delete e.match}}function V(e,t){void 0===e.relevance&&(e.relevance=1)}const W=(e,t)=>{if(!e.beforeMatch)return;if(e.starts)throw new Error("beforeMatch cannot be used with starts");const n=Object.assign({},e);Object.keys(e).forEach((t=>{delete e[t]})),e.keywords=n.keywords,e.begin=h(n.beforeMatch,d(n.begin)),e.starts={relevance:0,contains:[Object.assign(n,{endsParent:!0})]},e.relevance=0,delete n.beforeMatch},G=["of","and","for","in","not","or","if","then","parent","list","value"];function K(e,t,n="keyword"){const r=Object.create(null);return"string"==typeof e?u(n,e.split(" ")):Array.isArray(e)?u(n,e):Object.keys(e).forEach((function(n){Object.assign(r,K(e[n],t,n))})),r;function u(e,n){t&&(n=n.map((e=>e.toLowerCase()))),n.forEach((function(t){const n=t.split("|");r[n[0]]=[e,Q(n[0],n[1])]}))}}function Q(e,t){return t?Number(t):function(e){return G.includes(e.toLowerCase())}(e)?0:1}const q={},Z=e=>{console.error(e)},X=(e,...t)=>{console.log(`WARN: ${e}`,...t)},Y=(e,t)=>{q[`${e}/${t}`]||(console.log(`Deprecated as of ${e}. ${t}`),q[`${e}/${t}`]=!0)},J=new Error;function ee(e,t,{key:n}){let r=0;const u=e[n],a={},o={};for(let e=1;e<=t.length;e++)o[e+r]=u[e],a[e+r]=!0,r+=D(t[e-1]);e[n]=o,e[n]._emit=a,e[n]._multi=!0}function te(e){!function(e){e.scope&&"object"==typeof e.scope&&null!==e.scope&&(e.beginScope=e.scope,delete e.scope)}(e),"string"==typeof e.beginScope&&(e.beginScope={_wrap:e.beginScope}),"string"==typeof e.endScope&&(e.endScope={_wrap:e.endScope}),function(e){if(Array.isArray(e.begin)){if(e.skip||e.excludeBegin||e.returnBegin)throw Z("skip, excludeBegin, returnBegin not compatible with beginScope: {}"),J;if("object"!=typeof e.beginScope||null===e.beginScope)throw Z("beginScope must be object"),J;ee(e,e.begin,{key:"beginScope"}),e.begin=y(e.begin,{joinWith:""})}}(e),function(e){if(Array.isArray(e.end)){if(e.skip||e.excludeEnd||e.returnEnd)throw Z("skip, excludeEnd, returnEnd not compatible with endScope: {}"),J;if("object"!=typeof e.endScope||null===e.endScope)throw Z("endScope must be object"),J;ee(e,e.end,{key:"endScope"}),e.end=y(e.end,{joinWith:""})}}(e)}function ne(e){function t(t,n){return new RegExp(f(t),"m"+(e.case_insensitive?"i":"")+(e.unicodeRegex?"u":"")+(n?"g":""))}class n{constructor(){this.matchIndexes={},this.regexes=[],this.matchAt=1,this.position=0}addRule(e,t){t.position=this.position++,this.matchIndexes[this.matchAt]=t,this.regexes.push([t,e]),this.matchAt+=D(e)+1}compile(){0===this.regexes.length&&(this.exec=()=>null);const e=this.regexes.map((e=>e[1]));this.matcherRe=t(y(e,{joinWith:"|"}),!0),this.lastIndex=0}exec(e){this.matcherRe.lastIndex=this.lastIndex;const t=this.matcherRe.exec(e);if(!t)return null;const n=t.findIndex(((e,t)=>t>0&&void 0!==e)),r=this.matchIndexes[n];return t.splice(0,n),Object.assign(t,r)}}class r{constructor(){this.rules=[],this.multiRegexes=[],this.count=0,this.lastIndex=0,this.regexIndex=0}getMatcher(e){if(this.multiRegexes[e])return this.multiRegexes[e];const t=new n;return this.rules.slice(e).forEach((([e,n])=>t.addRule(e,n))),t.compile(),this.multiRegexes[e]=t,t}resumingScanAtSamePosition(){return 0!==this.regexIndex}considerAll(){this.regexIndex=0}addRule(e,t){this.rules.push([e,t]),"begin"===t.type&&this.count++}exec(e){const t=this.getMatcher(this.regexIndex);t.lastIndex=this.lastIndex;let n=t.exec(e);if(this.resumingScanAtSamePosition())if(n&&n.index===this.lastIndex);else{const t=this.getMatcher(0);t.lastIndex=this.lastIndex+1,n=t.exec(e)}return n&&(this.regexIndex+=n.position+1,this.regexIndex===this.count&&this.considerAll()),n}}if(e.compilerExtensions||(e.compilerExtensions=[]),e.contains&&e.contains.includes("self"))throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");return e.classNameAliases=o(e.classNameAliases||{}),function n(u,a){const l=u;if(u.isCompiled)return l;[R,H,te,W].forEach((e=>e(u,a))),e.compilerExtensions.forEach((e=>e(u,a))),u.__beforeBegin=null,[U,$,V].forEach((e=>e(u,a))),u.isCompiled=!0;let i=null;return"object"==typeof u.keywords&&u.keywords.$pattern&&(u.keywords=Object.assign({},u.keywords),i=u.keywords.$pattern,delete u.keywords.$pattern),i=i||/\w+/,u.keywords&&(u.keywords=K(u.keywords,e.case_insensitive)),l.keywordPatternRe=t(i,!0),a&&(u.begin||(u.begin=/\B|\b/),l.beginRe=t(l.begin),u.end||u.endsWithParent||(u.end=/\B|\b/),u.end&&(l.endRe=t(l.end)),l.terminatorEnd=f(l.end)||"",u.endsWithParent&&a.terminatorEnd&&(l.terminatorEnd+=(u.end?"|":"")+a.terminatorEnd)),u.illegal&&(l.illegalRe=t(u.illegal)),u.contains||(u.contains=[]),u.contains=[].concat(...u.contains.map((function(e){return function(e){return e.variants&&!e.cachedVariants&&(e.cachedVariants=e.variants.map((function(t){return o(e,{variants:null},t)}))),e.cachedVariants?e.cachedVariants:re(e)?o(e,{starts:e.starts?o(e.starts):null}):Object.isFrozen(e)?o(e):e}("self"===e?u:e)}))),u.contains.forEach((function(e){n(e,l)})),u.starts&&n(u.starts,a),l.matcher=function(e){const t=new r;return e.contains.forEach((e=>t.addRule(e.begin,{rule:e,type:"begin"}))),e.terminatorEnd&&t.addRule(e.terminatorEnd,{type:"end"}),e.illegal&&t.addRule(e.illegal,{type:"illegal"}),t}(l),l}(e)}function re(e){return!!e&&(e.endsWithParent||re(e.starts))}class ue extends Error{constructor(e,t){super(e),this.name="HTMLInjectionError",this.html=t}}const ae=a,oe=o,le=Symbol("nomatch");var ie=function(e){const t=Object.create(null),n=Object.create(null),a=[];let o=!0;const l="Could not find the language '{}', did you forget to load/include a language module?",i={disableAutodetect:!0,name:"Plain text",contains:[]};let s={ignoreUnescapedHTML:!1,throwUnescapedHTML:!1,noHighlightRe:/^(no-?highlight)$/i,languageDetectRe:/\blang(?:uage)?-([\w-]+)\b/i,classPrefix:"hljs-",cssSelector:"pre code",languages:null,__emitter:c};function f(e){return s.noHighlightRe.test(e)}function D(e,t,n){let r="",u="";"object"==typeof t?(r=e,n=t.ignoreIllegals,u=t.language):(Y("10.7.0","highlight(lang, code, ...args) has been deprecated."),Y("10.7.0","Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277"),u=e,r=t),void 0===n&&(n=!0);const a={code:r,language:u};x("before:highlight",a);const o=a.result?a.result:v(a.language,a.code,n);return o.code=a.code,x("after:highlight",o),o}function v(e,n,r,a){const i=Object.create(null);function c(){if(!w.keywords)return void k.addText(_);let e=0;w.keywordPatternRe.lastIndex=0;let t=w.keywordPatternRe.exec(_),n="";for(;t;){n+=_.substring(e,t.index);const u=C.case_insensitive?t[0].toLowerCase():t[0],a=(r=u,w.keywords[r]);if(a){const[e,r]=a;if(k.addText(n),n="",i[u]=(i[u]||0)+1,i[u]<=7&&(S+=r),e.startsWith("_"))n+=t[0];else{const n=C.classNameAliases[e]||e;k.addKeyword(t[0],n)}}else n+=t[0];e=w.keywordPatternRe.lastIndex,t=w.keywordPatternRe.exec(_)}var r;n+=_.substr(e),k.addText(n)}function f(){null!=w.subLanguage?function(){if(""===_)return;let e=null;if("string"==typeof w.subLanguage){if(!t[w.subLanguage])return void k.addText(_);e=v(w.subLanguage,_,!0,x[w.subLanguage]),x[w.subLanguage]=e._top}else e=y(_,w.subLanguage.length?w.subLanguage:null);w.relevance>0&&(S+=e.relevance),k.addSublanguage(e._emitter,e.language)}():c(),_=""}function d(e,t){let n=1;const r=t.length-1;for(;n<=r;){if(!e._emit[n]){n++;continue}const r=C.classNameAliases[e[n]]||e[n],u=t[n];r?k.addKeyword(u,r):(_=u,c(),_=""),n++}}function p(e,t){return e.scope&&"string"==typeof e.scope&&k.openNode(C.classNameAliases[e.scope]||e.scope),e.beginScope&&(e.beginScope._wrap?(k.addKeyword(_,C.classNameAliases[e.beginScope._wrap]||e.beginScope._wrap),_=""):e.beginScope._multi&&(d(e.beginScope,t),_="")),w=Object.create(e,{parent:{value:w}}),w}function g(e,t,n){let r=function(e,t){const n=e&&e.exec(t);return n&&0===n.index}(e.endRe,n);if(r){if(e["on:end"]){const n=new u(e);e["on:end"](t,n),n.isMatchIgnored&&(r=!1)}if(r){for(;e.endsParent&&e.parent;)e=e.parent;return e}}if(e.endsWithParent)return g(e.parent,t,n)}function h(e){return 0===w.matcher.regexIndex?(_+=e[0],1):(N=!0,0)}function m(e){const t=e[0],r=n.substr(e.index),u=g(w,e,r);if(!u)return le;const a=w;w.endScope&&w.endScope._wrap?(f(),k.addKeyword(t,w.endScope._wrap)):w.endScope&&w.endScope._multi?(f(),d(w.endScope,e)):a.skip?_+=t:(a.returnEnd||a.excludeEnd||(_+=t),f(),a.excludeEnd&&(_=t));do{w.scope&&k.closeNode(),w.skip||w.subLanguage||(S+=w.relevance),w=w.parent}while(w!==u.parent);return u.starts&&p(u.starts,e),a.returnEnd?0:t.length}let D={};function b(t,a){const l=a&&a[0];if(_+=t,null==l)return f(),0;if("begin"===D.type&&"end"===a.type&&D.index===a.index&&""===l){if(_+=n.slice(a.index,a.index+1),!o){const t=new Error(`0 width match regex (${e})`);throw t.languageName=e,t.badRule=D.rule,t}return 1}if(D=a,"begin"===a.type)return function(e){const t=e[0],n=e.rule,r=new u(n),a=[n.__beforeBegin,n["on:begin"]];for(const n of a)if(n&&(n(e,r),r.isMatchIgnored))return h(t);return n.skip?_+=t:(n.excludeBegin&&(_+=t),f(),n.returnBegin||n.excludeBegin||(_=t)),p(n,e),n.returnBegin?0:t.length}(a);if("illegal"===a.type&&!r){const e=new Error('Illegal lexeme "'+l+'" for mode "'+(w.scope||"<unnamed>")+'"');throw e.mode=w,e}if("end"===a.type){const e=m(a);if(e!==le)return e}if("illegal"===a.type&&""===l)return 1;if(M>1e5&&M>3*a.index)throw new Error("potential infinite loop, way more iterations than matches");return _+=l,l.length}const C=A(e);if(!C)throw Z(l.replace("{}",e)),new Error('Unknown language: "'+e+'"');const E=ne(C);let F="",w=a||E;const x={},k=new s.__emitter(s);!function(){const e=[];for(let t=w;t!==C;t=t.parent)t.scope&&e.unshift(t.scope);e.forEach((e=>k.openNode(e)))}();let _="",S=0,B=0,M=0,N=!1;try{for(w.matcher.considerAll();;){M++,N?N=!1:w.matcher.considerAll(),w.matcher.lastIndex=B;const e=w.matcher.exec(n);if(!e)break;const t=b(n.substring(B,e.index),e);B=e.index+t}return b(n.substr(B)),k.closeAllNodes(),k.finalize(),F=k.toHTML(),{language:e,value:F,relevance:S,illegal:!1,_emitter:k,_top:w}}catch(t){if(t.message&&t.message.includes("Illegal"))return{language:e,value:ae(n),illegal:!0,relevance:0,_illegalBy:{message:t.message,index:B,context:n.slice(B-100,B+100),mode:t.mode,resultSoFar:F},_emitter:k};if(o)return{language:e,value:ae(n),illegal:!1,relevance:0,errorRaised:t,_emitter:k,_top:w};throw t}}function y(e,n){n=n||s.languages||Object.keys(t);const r=function(e){const t={value:ae(e),illegal:!1,relevance:0,_top:i,_emitter:new s.__emitter(s)};return t._emitter.addText(e),t}(e),u=n.filter(A).filter(w).map((t=>v(t,e,!1)));u.unshift(r);const a=u.sort(((e,t)=>{if(e.relevance!==t.relevance)return t.relevance-e.relevance;if(e.language&&t.language){if(A(e.language).supersetOf===t.language)return 1;if(A(t.language).supersetOf===e.language)return-1}return 0})),[o,l]=a,c=o;return c.secondBest=l,c}function b(e){let t=null;const r=function(e){let t=e.className+" ";t+=e.parentNode?e.parentNode.className:"";const n=s.languageDetectRe.exec(t);if(n){const t=A(n[1]);return t||(X(l.replace("{}",n[1])),X("Falling back to no-highlight mode for this block.",e)),t?n[1]:"no-highlight"}return t.split(/\s+/).find((e=>f(e)||A(e)))}(e);if(f(r))return;if(x("before:highlightElement",{el:e,language:r}),e.children.length>0&&(s.ignoreUnescapedHTML||(console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk."),console.warn("https://github.com/highlightjs/highlight.js/wiki/security"),console.warn("The element with unescaped HTML:"),console.warn(e)),s.throwUnescapedHTML))throw new ue("One of your code blocks includes unescaped HTML.",e.innerHTML);t=e;const u=t.textContent,a=r?D(u,{language:r,ignoreIllegals:!0}):y(u);e.innerHTML=a.value,function(e,t,r){const u=t&&n[t]||r;e.classList.add("hljs"),e.classList.add(`language-${u}`)}(e,r,a.language),e.result={language:a.language,re:a.relevance,relevance:a.relevance},a.secondBest&&(e.secondBest={language:a.secondBest.language,relevance:a.secondBest.relevance}),x("after:highlightElement",{el:e,result:a,text:u})}let C=!1;function E(){"loading"!==document.readyState?document.querySelectorAll(s.cssSelector).forEach(b):C=!0}function A(e){return e=(e||"").toLowerCase(),t[e]||t[n[e]]}function F(e,{languageName:t}){"string"==typeof e&&(e=[e]),e.forEach((e=>{n[e.toLowerCase()]=t}))}function w(e){const t=A(e);return t&&!t.disableAutodetect}function x(e,t){const n=e;a.forEach((function(e){e[n]&&e[n](t)}))}"undefined"!=typeof window&&window.addEventListener&&window.addEventListener("DOMContentLoaded",(function(){C&&E()}),!1),Object.assign(e,{highlight:D,highlightAuto:y,highlightAll:E,highlightElement:b,highlightBlock:function(e){return Y("10.7.0","highlightBlock will be removed entirely in v12.0"),Y("10.7.0","Please use highlightElement now."),b(e)},configure:function(e){s=oe(s,e)},initHighlighting:()=>{E(),Y("10.6.0","initHighlighting() deprecated.  Use highlightAll() now.")},initHighlightingOnLoad:function(){E(),Y("10.6.0","initHighlightingOnLoad() deprecated.  Use highlightAll() now.")},registerLanguage:function(n,r){let u=null;try{u=r(e)}catch(e){if(Z("Language definition for '{}' could not be registered.".replace("{}",n)),!o)throw e;Z(e),u=i}u.name||(u.name=n),t[n]=u,u.rawDefinition=r.bind(null,e),u.aliases&&F(u.aliases,{languageName:n})},unregisterLanguage:function(e){delete t[e];for(const t of Object.keys(n))n[t]===e&&delete n[t]},listLanguages:function(){return Object.keys(t)},getLanguage:A,registerAliases:F,autoDetection:w,inherit:oe,addPlugin:function(e){!function(e){e["before:highlightBlock"]&&!e["before:highlightElement"]&&(e["before:highlightElement"]=t=>{e["before:highlightBlock"](Object.assign({block:t.el},t))}),e["after:highlightBlock"]&&!e["after:highlightElement"]&&(e["after:highlightElement"]=t=>{e["after:highlightBlock"](Object.assign({block:t.el},t))})}(e),a.push(e)}}),e.debugMode=function(){o=!1},e.safeMode=function(){o=!0},e.versionString="11.5.0",e.regex={concat:h,lookahead:d,either:m,optional:g,anyNumberOfTimes:p};for(const e in j)"object"==typeof j[e]&&r(j[e]);return Object.assign(e,j),e}({});e.exports=ie,ie.HighlightJS=ie,ie.default=ie},1942:e=>{e.exports=function(e){return{name:"GLSL",keywords:{keyword:"break continue discard do else for if return while switch case default attribute binding buffer ccw centroid centroid varying coherent column_major const cw depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip triangles triangles_adjacency uniform varying vertices volatile writeonly",type:"atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void",built_in:"gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow",literal:"true false"},illegal:'"',contains:[e.C_LINE_COMMENT_MODE,e.C_BLOCK_COMMENT_MODE,e.C_NUMBER_MODE,{className:"meta",begin:"#",end:"$"}]}}},8987:e=>{const t="[A-Za-z$_][0-9A-Za-z$_]*",n=["as","in","of","if","for","while","finally","var","new","function","do","return","void","else","break","catch","instanceof","with","throw","case","default","try","switch","continue","typeof","delete","let","yield","const","class","debugger","async","await","static","import","from","export","extends"],r=["true","false","null","undefined","NaN","Infinity"],u=["Object","Function","Boolean","Symbol","Math","Date","Number","BigInt","String","RegExp","Array","Float32Array","Float64Array","Int8Array","Uint8Array","Uint8ClampedArray","Int16Array","Int32Array","Uint16Array","Uint32Array","BigInt64Array","BigUint64Array","Set","Map","WeakSet","WeakMap","ArrayBuffer","SharedArrayBuffer","Atomics","DataView","JSON","Promise","Generator","GeneratorFunction","AsyncFunction","Reflect","Proxy","Intl","WebAssembly"],a=["Error","EvalError","InternalError","RangeError","ReferenceError","SyntaxError","TypeError","URIError"],o=["setInterval","setTimeout","clearInterval","clearTimeout","require","exports","eval","isFinite","isNaN","parseFloat","parseInt","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","escape","unescape"],l=["arguments","this","super","console","window","document","localStorage","module","global"],i=[].concat(o,u,a);function s(e){const s=e.regex,c=t,f={begin:/<[A-Za-z0-9\\._:-]+/,end:/\/[A-Za-z0-9\\._:-]+>|\/>/,isTrulyOpeningTag:(e,t)=>{const n=e[0].length+e.index,r=e.input[n];if("<"===r||","===r)return void t.ignoreMatch();let u;">"===r&&(((e,{after:t})=>{const n="</"+e[0].slice(1);return-1!==e.input.indexOf(n,t)})(e,{after:n})||t.ignoreMatch()),(u=e.input.substr(n).match(/^\s+extends\s+/))&&0===u.index&&t.ignoreMatch()}},d={$pattern:t,keyword:n,literal:r,built_in:i,"variable.language":l},p="\\.([0-9](_?[0-9])*)",g="0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*",h={className:"number",variants:[{begin:`(\\b(${g})((${p})|\\.)?|(${p}))[eE][+-]?([0-9](_?[0-9])*)\\b`},{begin:`\\b(${g})\\b((${p})\\b|\\.)?|(${p})\\b`},{begin:"\\b(0|[1-9](_?[0-9])*)n\\b"},{begin:"\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b"},{begin:"\\b0[bB][0-1](_?[0-1])*n?\\b"},{begin:"\\b0[oO][0-7](_?[0-7])*n?\\b"},{begin:"\\b0[0-7]+n?\\b"}],relevance:0},m={className:"subst",begin:"\\$\\{",end:"\\}",keywords:d,contains:[]},D={begin:"html`",end:"",starts:{end:"`",returnEnd:!1,contains:[e.BACKSLASH_ESCAPE,m],subLanguage:"xml"}},v={begin:"css`",end:"",starts:{end:"`",returnEnd:!1,contains:[e.BACKSLASH_ESCAPE,m],subLanguage:"css"}},y={className:"string",begin:"`",end:"`",contains:[e.BACKSLASH_ESCAPE,m]},b={className:"comment",variants:[e.COMMENT(/\/\*\*(?!\/)/,"\\*/",{relevance:0,contains:[{begin:"(?=@[A-Za-z]+)",relevance:0,contains:[{className:"doctag",begin:"@[A-Za-z]+"},{className:"type",begin:"\\{",end:"\\}",excludeEnd:!0,excludeBegin:!0,relevance:0},{className:"variable",begin:c+"(?=\\s*(-)|$)",endsParent:!0,relevance:0},{begin:/(?=[^\n])\s/,relevance:0}]}]}),e.C_BLOCK_COMMENT_MODE,e.C_LINE_COMMENT_MODE]},C=[e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,D,v,y,h];m.contains=C.concat({begin:/\{/,end:/\}/,keywords:d,contains:["self"].concat(C)});const E=[].concat(b,m.contains),A=E.concat([{begin:/\(/,end:/\)/,keywords:d,contains:["self"].concat(E)}]),F={className:"params",begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:d,contains:A},w={variants:[{match:[/class/,/\s+/,c,/\s+/,/extends/,/\s+/,s.concat(c,"(",s.concat(/\./,c),")*")],scope:{1:"keyword",3:"title.class",5:"keyword",7:"title.class.inherited"}},{match:[/class/,/\s+/,c],scope:{1:"keyword",3:"title.class"}}]},x={relevance:0,match:s.either(/\bJSON/,/\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,/\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,/\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/),className:"title.class",keywords:{_:[...u,...a]}},k={variants:[{match:[/function/,/\s+/,c,/(?=\s*\()/]},{match:[/function/,/\s*(?=\()/]}],className:{1:"keyword",3:"title.function"},label:"func.def",contains:[F],illegal:/%/},_={match:s.concat(/\b/,(S=[...o,"super"],s.concat("(?!",S.join("|"),")")),c,s.lookahead(/\(/)),className:"title.function",relevance:0};var S;const B={begin:s.concat(/\./,s.lookahead(s.concat(c,/(?![0-9A-Za-z$_(])/))),end:c,excludeBegin:!0,keywords:"prototype",className:"property",relevance:0},M={match:[/get|set/,/\s+/,c,/(?=\()/],className:{1:"keyword",3:"title.function"},contains:[{begin:/\(\)/},F]},N="(\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)|"+e.UNDERSCORE_IDENT_RE+")\\s*=>",P={match:[/const|var|let/,/\s+/,c,/\s*/,/=\s*/,/(async\s*)?/,s.lookahead(N)],keywords:"async",className:{1:"keyword",3:"title.function"},contains:[F]};return{name:"Javascript",aliases:["js","jsx","mjs","cjs"],keywords:d,exports:{PARAMS_CONTAINS:A,CLASS_REFERENCE:x},illegal:/#(?![$_A-z])/,contains:[e.SHEBANG({label:"shebang",binary:"node",relevance:5}),{label:"use_strict",className:"meta",relevance:10,begin:/^\s*['"]use (strict|asm)['"]/},e.APOS_STRING_MODE,e.QUOTE_STRING_MODE,D,v,y,b,h,x,{className:"attr",begin:c+s.lookahead(":"),relevance:0},P,{begin:"("+e.RE_STARTERS_RE+"|\\b(case|return|throw)\\b)\\s*",keywords:"return throw case",relevance:0,contains:[b,e.REGEXP_MODE,{className:"function",begin:N,returnBegin:!0,end:"\\s*=>",contains:[{className:"params",variants:[{begin:e.UNDERSCORE_IDENT_RE,relevance:0},{className:null,begin:/\(\s*\)/,skip:!0},{begin:/\(/,end:/\)/,excludeBegin:!0,excludeEnd:!0,keywords:d,contains:A}]}]},{begin:/,/,relevance:0},{match:/\s+/,relevance:0},{variants:[{begin:"<>",end:"</>"},{match:/<[A-Za-z0-9\\._:-]+\s*\/>/},{begin:f.begin,"on:begin":f.isTrulyOpeningTag,end:f.end}],subLanguage:"xml",contains:[{begin:f.begin,end:f.end,skip:!0,contains:["self"]}]}]},k,{beginKeywords:"while if switch catch for"},{begin:"\\b(?!function)"+e.UNDERSCORE_IDENT_RE+"\\([^()]*(\\([^()]*(\\([^()]*\\)[^()]*)*\\)[^()]*)*\\)\\s*\\{",returnBegin:!0,label:"func.def",contains:[F,e.inherit(e.TITLE_MODE,{begin:c,className:"title.function"})]},{match:/\.\.\./,relevance:0},B,{match:"\\$"+c,relevance:0},{match:[/\bconstructor(?=\s*\()/],className:{1:"title.function"},contains:[F]},_,{relevance:0,match:/\b[A-Z][A-Z_0-9]+\b/,className:"variable.constant"},w,M,{match:/\$[(.]/}]}}e.exports=function(e){const u=s(e),a=["any","void","number","boolean","string","object","never","symbol","bigint","unknown"],o={beginKeywords:"namespace",end:/\{/,excludeEnd:!0,contains:[u.exports.CLASS_REFERENCE]},c={beginKeywords:"interface",end:/\{/,excludeEnd:!0,keywords:{keyword:"interface extends",built_in:a},contains:[u.exports.CLASS_REFERENCE]},f={$pattern:t,keyword:n.concat(["type","namespace","interface","public","private","protected","implements","declare","abstract","readonly","enum","override"]),literal:r,built_in:i.concat(a),"variable.language":l},d={className:"meta",begin:"@[A-Za-z$_][0-9A-Za-z$_]*"},p=(e,t,n)=>{const r=e.contains.findIndex((e=>e.label===t));if(-1===r)throw new Error("can not find mode to replace");e.contains.splice(r,1,n)};return Object.assign(u.keywords,f),u.exports.PARAMS_CONTAINS.push(d),u.contains=u.contains.concat([d,o,c]),p(u,"shebang",e.SHEBANG()),p(u,"use_strict",{className:"meta",relevance:10,begin:/^\s*['"]use strict['"]/}),u.contains.find((e=>"func.def"===e.label)).relevance=0,Object.assign(u,{name:"TypeScript",aliases:["ts","tsx"]}),u}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,